import type { Core } from '../babel';
import type { TransformCacheCollection } from '../cache';
import type { ITransformFileResult, Options } from '../types';
export declare type FileInQueue = {
    name: string;
    code: string;
    only: string[];
} | null;
export declare function prepareForEvalSync(babel: Core, cache: TransformCacheCollection, resolve: (what: string, importer: string, stack: string[]) => string, resolvedFile: FileInQueue, options: Pick<Options, 'root' | 'pluginOptions' | 'inputSourceMap'>, stack?: string[]): ITransformFileResult[] | undefined;
/**
 * Parses the specified file and recursively all its dependencies,
 * finds tags, applies eval-time replacements, removes dead code.
 */
export default function prepareForEval(babel: Core, cache: TransformCacheCollection, resolve: (what: string, importer: string, stack: string[]) => Promise<string | null>, file: Promise<FileInQueue>, options: Pick<Options, 'root' | 'pluginOptions' | 'inputSourceMap'>, stack?: string[]): Promise<ITransformFileResult[] | undefined>;
