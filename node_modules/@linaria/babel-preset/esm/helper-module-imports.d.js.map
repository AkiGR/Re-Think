{"version":3,"file":"helper-module-imports.d.js","names":[],"sources":["../src/helper-module-imports.d.ts"],"sourcesContent":["declare module '@babel/helper-module-imports' {\n  import type { NodePath } from '@babel/traverse';\n  import type * as t from '@babel/types';\n\n  type ImportOptions = {\n    /**\n     * The module being referenced.\n     */\n    importedSource: string | null;\n    /**\n     * The type of module being imported:\n     *\n     *  * 'es6'      - An ES6 module.\n     *  * 'commonjs' - A CommonJS module. (Default)\n     */\n    importedType: 'es6' | 'commonjs';\n    /**\n     * The type of interop behavior for namespace/default/named when loading\n     * CommonJS modules.\n     *\n     * ## 'babel' (Default)\n     *\n     * Load using Babel's interop.\n     *\n     * If '.__esModule' is true, treat as 'compiled', else:\n     *\n     * * Namespace: A copy of the module.exports with .default\n     *     populated by the module.exports object.\n     * * Default: The module.exports value.\n     * * Named: The .named property of module.exports.\n     *\n     * The 'ensureLiveReference' has no effect on the liveness of these.\n     *\n     * ## 'compiled'\n     *\n     * Assume the module is ES6 compiled to CommonJS. Useful to avoid injecting\n     * interop logic if you are confident that the module is a certain format.\n     *\n     * * Namespace: The root module.exports object.\n     * * Default: The .default property of the namespace.\n     * * Named: The .named property of the namespace.\n     *\n     * Will return erroneous results if the imported module is _not_ compiled\n     * from ES6 with Babel.\n     *\n     * ## 'uncompiled'\n     *\n     * Assume the module is _not_ ES6 compiled to CommonJS. Used a simplified\n     * access pattern that doesn't require additional function calls.\n     *\n     * Will return erroneous results if the imported module _is_ compiled\n     * from ES6 with Babel.\n     *\n     * * Namespace: The module.exports object.\n     * * Default: The module.exports object.\n     * * Named: The .named property of module.exports.\n     */\n    importedInterop: 'babel' | 'node' | 'compiled' | 'uncompiled';\n    /**\n     * The type of CommonJS interop included in the environment that will be\n     * loading the output code.\n     *\n     *  * 'babel' - CommonJS modules load with Babel's interop. (Default)\n     *  * 'node'  - CommonJS modules load with Node's interop.\n     *\n     * See descriptions in 'importedInterop' for more details.\n     */\n    importingInterop: 'babel' | 'node';\n    /**\n     * Define whether the import should be loaded before or after the existing imports.\n     * \"after\" is only allowed inside ECMAScript modules, since it's not possible to\n     * reliably pick the location _after_ require() calls but _before_ other code in CJS.\n     */\n    importPosition: 'before' | 'after';\n\n    nameHint?: string;\n    blockHoist?: number;\n  };\n\n  function addDefault(\n    path: NodePath,\n    importedSource: string,\n    opts?: Partial<ImportOptions>\n  ): t.Identifier;\n\n  function addNamed(\n    path: NodePath,\n    name: string,\n    importedSource: string,\n    opts?: Partial<ImportOptions>\n  ): t.Identifier;\n}\n"],"mappings":""}