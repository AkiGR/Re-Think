{"ast":null,"code":"// src/SimpleMdeReact.tsx\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport SimpleMDE from \"easymde\";\nvar _id = 0;\nvar generateId = () => `simplemde-editor-${++_id}`;\nvar useHandleEditorInstanceLifecycle = _ref => {\n  let {\n    options,\n    id,\n    currentValueRef,\n    textRef\n  } = _ref;\n  const [editor, setEditor] = useState(null);\n  const imageUploadCallback = useCallback((file, onSuccess, onError) => {\n    const imageUpload = options == null ? void 0 : options.imageUploadFunction;\n    if (imageUpload) {\n      const _onSuccess = url => {\n        onSuccess(url);\n      };\n      imageUpload(file, _onSuccess, onError);\n    }\n  }, [options == null ? void 0 : options.imageUploadFunction]);\n  const editorRef = useRef(editor);\n  editorRef.current = editor;\n  useEffect(() => {\n    let editor2;\n    if (textRef) {\n      const initialOptions = {\n        element: textRef,\n        initialValue: currentValueRef.current\n      };\n      const imageUploadFunction = (options == null ? void 0 : options.imageUploadFunction) ? imageUploadCallback : void 0;\n      editor2 = new SimpleMDE(Object.assign({}, initialOptions, options, {\n        imageUploadFunction\n      }));\n      setEditor(editor2);\n    }\n    return () => {\n      editor2 == null ? void 0 : editor2.toTextArea();\n      editor2 == null ? void 0 : editor2.cleanup();\n    };\n  }, [textRef, currentValueRef, id, imageUploadCallback, options]);\n  const codemirror = useMemo(() => {\n    return editor == null ? void 0 : editor.codemirror;\n  }, [editor == null ? void 0 : editor.codemirror]);\n  return {\n    editor,\n    codemirror\n  };\n};\nvar SimpleMdeReact = React.forwardRef((props, ref) => {\n  const {\n    events,\n    value,\n    options,\n    children,\n    extraKeys,\n    getLineAndCursor,\n    getMdeInstance,\n    getCodemirrorInstance,\n    onChange,\n    id: anId,\n    placeholder,\n    textareaProps,\n    ...rest\n  } = props;\n  const id = useMemo(() => anId ?? generateId(), [anId]);\n  const elementWrapperRef = useRef(null);\n  const nonEventChangeRef = useRef(true);\n  const currentValueRef = useRef(value);\n  currentValueRef.current = value;\n  const [textRef, setTextRef] = useState(null);\n  const {\n    editor,\n    codemirror\n  } = useHandleEditorInstanceLifecycle({\n    options,\n    id,\n    currentValueRef,\n    textRef\n  });\n  useEffect(() => {\n    if (nonEventChangeRef.current) {\n      editor == null ? void 0 : editor.value(value ?? \"\");\n    }\n    nonEventChangeRef.current = true;\n  }, [editor, value]);\n  const onCodemirrorChangeHandler = useCallback((_, changeObject) => {\n    if ((editor == null ? void 0 : editor.value()) !== currentValueRef.current) {\n      nonEventChangeRef.current = false;\n      onChange == null ? void 0 : onChange((editor == null ? void 0 : editor.value()) ?? \"\", changeObject);\n    }\n  }, [editor, onChange]);\n  useEffect(() => {\n    if (options == null ? void 0 : options.autofocus) {\n      codemirror == null ? void 0 : codemirror.focus();\n      codemirror == null ? void 0 : codemirror.setCursor(codemirror == null ? void 0 : codemirror.lineCount(), 0);\n    }\n  }, [codemirror, options == null ? void 0 : options.autofocus]);\n  const getCursorCallback = useCallback(() => {\n    codemirror && (getLineAndCursor == null ? void 0 : getLineAndCursor(codemirror.getDoc().getCursor()));\n  }, [codemirror, getLineAndCursor]);\n  useEffect(() => {\n    getCursorCallback();\n  }, [getCursorCallback]);\n  useEffect(() => {\n    editor && (getMdeInstance == null ? void 0 : getMdeInstance(editor));\n  }, [editor, getMdeInstance]);\n  useEffect(() => {\n    codemirror && (getCodemirrorInstance == null ? void 0 : getCodemirrorInstance(codemirror));\n  }, [codemirror, getCodemirrorInstance, getMdeInstance]);\n  useEffect(() => {\n    if (extraKeys && codemirror) {\n      codemirror.setOption(\"extraKeys\", Object.assign({}, codemirror.getOption(\"extraKeys\"), extraKeys));\n    }\n  }, [codemirror, extraKeys]);\n  useEffect(() => {\n    var _a;\n    const toolbarNode = (_a = elementWrapperRef.current) == null ? void 0 : _a.getElementsByClassName(\"editor-toolbarNode\")[0];\n    const handler = codemirror && onCodemirrorChangeHandler;\n    if (handler) {\n      toolbarNode == null ? void 0 : toolbarNode.addEventListener(\"click\", handler);\n      return () => {\n        toolbarNode == null ? void 0 : toolbarNode.removeEventListener(\"click\", handler);\n      };\n    }\n    return () => {};\n  }, [codemirror, onCodemirrorChangeHandler]);\n  useEffect(() => {\n    codemirror == null ? void 0 : codemirror.on(\"change\", onCodemirrorChangeHandler);\n    codemirror == null ? void 0 : codemirror.on(\"cursorActivity\", getCursorCallback);\n    return () => {\n      codemirror == null ? void 0 : codemirror.off(\"change\", onCodemirrorChangeHandler);\n      codemirror == null ? void 0 : codemirror.off(\"cursorActivity\", getCursorCallback);\n    };\n  }, [codemirror, getCursorCallback, onCodemirrorChangeHandler]);\n  const prevEvents = useRef(events);\n  useEffect(() => {\n    const isNotFirstEffectRun = events !== prevEvents.current;\n    isNotFirstEffectRun && prevEvents.current && Object.entries(prevEvents.current).forEach(_ref2 => {\n      let [event, handler] = _ref2;\n      handler && (codemirror == null ? void 0 : codemirror.off(event, handler));\n    });\n    events && Object.entries(events).forEach(_ref3 => {\n      let [event, handler] = _ref3;\n      handler && (codemirror == null ? void 0 : codemirror.on(event, handler));\n    });\n    prevEvents.current = events;\n    return () => {\n      events && Object.entries(events).forEach(_ref4 => {\n        let [event, handler] = _ref4;\n        handler && (codemirror == null ? void 0 : codemirror.off(event, handler));\n      });\n    };\n  }, [codemirror, events]);\n  return /* @__PURE__ */React.createElement(\"div\", {\n    id: `${id}-wrapper`,\n    ...rest,\n    ref: aRef => {\n      if (typeof ref === \"function\") {\n        ref(aRef);\n      } else if (ref) {\n        ref.current = aRef;\n      }\n      elementWrapperRef.current = aRef;\n    }\n  }, /* @__PURE__ */React.createElement(\"textarea\", {\n    ...textareaProps,\n    id,\n    placeholder,\n    ref: setTextRef,\n    style: {\n      display: \"none\"\n    }\n  }));\n});\nSimpleMdeReact.displayName = \"SimpleMdeReact\";\nvar SimpleMdeReact_default = SimpleMdeReact;\nexport { SimpleMdeReact, SimpleMdeReact_default as default };","map":{"version":3,"mappings":"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","names":["React","useCallback","useEffect","useMemo","useRef","useState","SimpleMDE","_id","generateId","useHandleEditorInstanceLifecycle","options","id","currentValueRef","textRef","editor","setEditor","imageUploadCallback","file","onSuccess","onError","imageUpload","imageUploadFunction","_onSuccess","url","editorRef","current","initialOptions","element","initialValue","Object","assign","toTextArea","cleanup","codemirror","SimpleMdeReact","forwardRef","props","ref","events","value","children","extraKeys","getLineAndCursor","getMdeInstance","getCodemirrorInstance","onChange","anId","placeholder","textareaProps","rest","elementWrapperRef","nonEventChangeRef","setTextRef","onCodemirrorChangeHandler","_","changeObject","autofocus","focus","setCursor","lineCount","getCursorCallback","getDoc","getCursor","setOption","getOption","toolbarNode","_a","getElementsByClassName","handler","addEventListener","removeEventListener","on","off","prevEvents","isNotFirstEffectRun","entries","forEach","event","aRef","style","display","displayName","SimpleMdeReact_default"],"sources":["/Users/hanauchiakiya/GitHub/re-Think/node_modules/react-simplemde-editor/src/SimpleMdeReact.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport SimpleMDE, { Options } from \"easymde\";\n\nimport type { Editor, EditorEventMap, KeyMap, Position } from \"codemirror\";\nimport { EditorChange } from \"codemirror\";\n\nlet _id = 0;\n\nconst generateId = () => `simplemde-editor-${++_id}`;\n\nexport type DOMEvent =\n  | \"mousedown\"\n  | \"dblclick\"\n  | \"touchstart\"\n  | \"contextmenu\"\n  | \"keydown\"\n  | \"keypress\"\n  | \"keyup\"\n  | \"cut\"\n  | \"copy\"\n  | \"paste\"\n  | \"dragstart\"\n  | \"dragenter\"\n  | \"dragover\"\n  | \"dragleave\"\n  | \"drop\";\n\nexport type CopyEvents = {\n  [TKey in string &\n    DOMEvent &\n    keyof DocumentAndElementEventHandlersEventMap as `${TKey}`]?: (\n    instance: Editor,\n    event: DocumentAndElementEventHandlersEventMap[TKey]\n  ) => void;\n};\n\nexport type GlobalEvents = {\n  [TKey in string &\n    DOMEvent &\n    keyof GlobalEventHandlersEventMap as `${TKey}`]?: (\n    instance: Editor,\n    event: GlobalEventHandlersEventMap[TKey]\n  ) => void;\n};\n\nexport type DefaultEvent = (instance: Editor, ...args: any[]) => void;\n\nexport type IndexEventsSignature = {\n  [key: string]: DefaultEvent | undefined;\n};\n\nexport interface SimpleMdeToCodemirrorEvents\n  extends CopyEvents,\n    GlobalEvents,\n    IndexEventsSignature,\n    Partial<EditorEventMap> {}\n\nexport type GetMdeInstance = (instance: SimpleMDE) => void;\nexport type GetCodemirrorInstance = (instance: Editor) => void;\nexport type GetLineAndCursor = (instance: Position) => void;\n\nexport interface SimpleMDEReactProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"onChange\"> {\n  id?: string;\n  onChange?: (value: string, changeObject?: EditorChange) => void;\n  value?: string;\n  extraKeys?: KeyMap;\n  options?: SimpleMDE.Options;\n  events?: SimpleMdeToCodemirrorEvents;\n  getMdeInstance?: GetMdeInstance;\n  getCodemirrorInstance?: GetCodemirrorInstance;\n  getLineAndCursor?: GetLineAndCursor;\n  placeholder?: string;\n  textareaProps?: Omit<\n    React.HTMLAttributes<HTMLTextAreaElement>,\n    \"id\" | \"style\" | \"placeholder\"\n  >;\n}\n\nconst useHandleEditorInstanceLifecycle = ({\n  options,\n  id,\n  currentValueRef,\n  textRef,\n}: {\n  options?: Options;\n  id: string;\n  currentValueRef: React.MutableRefObject<string | undefined>;\n  textRef: HTMLTextAreaElement | null;\n}) => {\n  const [editor, setEditor] = useState<SimpleMDE | null>(null);\n\n  const imageUploadCallback = useCallback(\n    (\n      file: File,\n      onSuccess: (url: string) => void,\n      onError: (error: string) => void\n    ) => {\n      const imageUpload = options?.imageUploadFunction;\n      if (imageUpload) {\n        const _onSuccess = (url: string) => {\n          onSuccess(url);\n        };\n        imageUpload(file, _onSuccess, onError);\n      }\n    },\n    [options?.imageUploadFunction]\n  );\n\n  const editorRef = useRef(editor);\n  editorRef.current = editor;\n\n  useEffect(() => {\n    let editor: SimpleMDE;\n    if (textRef) {\n      const initialOptions = {\n        element: textRef,\n        initialValue: currentValueRef.current,\n      };\n      const imageUploadFunction = options?.imageUploadFunction\n        ? imageUploadCallback\n        : undefined;\n      editor = new SimpleMDE(\n        Object.assign({}, initialOptions, options, {\n          imageUploadFunction,\n        })\n      );\n      setEditor(editor);\n    }\n    return () => {\n      editor?.toTextArea();\n      editor?.cleanup();\n    };\n  }, [textRef, currentValueRef, id, imageUploadCallback, options]);\n\n  const codemirror = useMemo(() => {\n    return editor?.codemirror;\n  }, [editor?.codemirror]) as Editor | undefined;\n  return { editor, codemirror };\n};\n\nexport const SimpleMdeReact = React.forwardRef<\n  HTMLDivElement,\n  SimpleMDEReactProps\n>((props, ref) => {\n  const {\n    events,\n    value,\n    options,\n    children,\n    extraKeys,\n    getLineAndCursor,\n    getMdeInstance,\n    getCodemirrorInstance,\n    onChange,\n    id: anId,\n    placeholder,\n    textareaProps,\n    ...rest\n  } = props;\n\n  const id = useMemo(() => anId ?? generateId(), [anId]);\n\n  const elementWrapperRef = useRef<HTMLDivElement | null>(null);\n  const nonEventChangeRef = useRef<boolean>(true);\n\n  // This is to not pass value as a dependency e.g. to keep event handlers referentially\n  // stable and do not `off` and `on` on each value change\n  // plus to avoid unnecessary EasyEde editor recreation on each value change while still, if it has to be remounted\n  // due to options and other deps change, to preserve that last value and not the default one from the first render.\n  const currentValueRef = useRef(value);\n  currentValueRef.current = value;\n\n  const [textRef, setTextRef] = useState<HTMLTextAreaElement | null>(null);\n  const { editor, codemirror } = useHandleEditorInstanceLifecycle({\n    options,\n    id,\n    currentValueRef,\n    textRef,\n  });\n\n  useEffect(() => {\n    // If change comes from the event we don't need to update `SimpleMDE` value as it already has it\n    // Otherwise we shall set it as it comes from `props` set from the outside. E.g. by some reset button and whatnot\n    if (nonEventChangeRef.current) {\n      editor?.value(value ?? \"\");\n    }\n    nonEventChangeRef.current = true;\n  }, [editor, value]); //  _: Editor | Event <===== is to please TS :)\n  const onCodemirrorChangeHandler = useCallback(\n    (_: Editor | Event, changeObject?: EditorChange) => {\n      if (editor?.value() !== currentValueRef.current) {\n        nonEventChangeRef.current = false;\n        onChange?.(editor?.value() ?? \"\", changeObject);\n      }\n    },\n    [editor, onChange]\n  );\n\n  useEffect(() => {\n    // For some reason it doesn't work out of the box, this makes sure it's working correctly\n    if (options?.autofocus) {\n      codemirror?.focus();\n      codemirror?.setCursor(codemirror?.lineCount(), 0);\n    }\n  }, [codemirror, options?.autofocus]);\n\n  const getCursorCallback = useCallback(() => {\n    // https://codemirror.net/doc/manual.html#api_selection\n    codemirror && getLineAndCursor?.(codemirror.getDoc().getCursor());\n  }, [codemirror, getLineAndCursor]);\n\n  useEffect(() => {\n    getCursorCallback();\n  }, [getCursorCallback]);\n\n  useEffect(() => {\n    editor && getMdeInstance?.(editor);\n  }, [editor, getMdeInstance]);\n\n  useEffect(() => {\n    codemirror && getCodemirrorInstance?.(codemirror);\n  }, [codemirror, getCodemirrorInstance, getMdeInstance]);\n\n  useEffect(() => {\n    // https://codemirror.net/doc/manual.html#option_extraKeys\n    if (extraKeys && codemirror) {\n      codemirror.setOption(\n        \"extraKeys\",\n        Object.assign({}, codemirror.getOption(\"extraKeys\"), extraKeys)\n      );\n    }\n  }, [codemirror, extraKeys]);\n\n  useEffect(() => {\n    const toolbarNode =\n      elementWrapperRef.current?.getElementsByClassName(\n        \"editor-toolbarNode\"\n      )[0];\n    const handler = codemirror && onCodemirrorChangeHandler;\n    if (handler) {\n      toolbarNode?.addEventListener(\"click\", handler);\n      return () => {\n        toolbarNode?.removeEventListener(\"click\", handler);\n      };\n    }\n    return () => {};\n  }, [codemirror, onCodemirrorChangeHandler]);\n\n  useEffect(() => {\n    codemirror?.on(\"change\", onCodemirrorChangeHandler);\n    codemirror?.on(\"cursorActivity\", getCursorCallback);\n    return () => {\n      codemirror?.off(\"change\", onCodemirrorChangeHandler);\n      codemirror?.off(\"cursorActivity\", getCursorCallback);\n    };\n  }, [codemirror, getCursorCallback, onCodemirrorChangeHandler]);\n\n  const prevEvents = useRef(events);\n\n  useEffect(() => {\n    const isNotFirstEffectRun = events !== prevEvents.current;\n    isNotFirstEffectRun &&\n      prevEvents.current &&\n      Object.entries(prevEvents.current).forEach(([event, handler]) => {\n        handler && codemirror?.off(event as keyof EditorEventMap, handler);\n      });\n\n    events &&\n      Object.entries(events).forEach(([event, handler]) => {\n        handler && codemirror?.on(event as keyof EditorEventMap, handler);\n      });\n    prevEvents.current = events;\n    return () => {\n      events &&\n        Object.entries(events).forEach(([event, handler]) => {\n          handler && codemirror?.off(event as keyof EditorEventMap, handler);\n        });\n    };\n  }, [codemirror, events]);\n\n  return (\n    <div\n      id={`${id}-wrapper`}\n      {...rest}\n      ref={(aRef) => {\n        if (typeof ref === \"function\") {\n          ref(aRef);\n        } else if (ref) {\n          ref.current = aRef;\n        }\n        elementWrapperRef.current = aRef;\n      }}\n    >\n      <textarea\n        {...textareaProps}\n        id={id}\n        placeholder={placeholder}\n        ref={setTextRef}\n        style={{ display: \"none\" }}\n      />\n    </div>\n  );\n});\n\nSimpleMdeReact.displayName = \"SimpleMdeReact\";\n\nexport default SimpleMdeReact;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}