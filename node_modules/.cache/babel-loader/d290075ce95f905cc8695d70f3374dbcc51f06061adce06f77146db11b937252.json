{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction createCommand(type) {\n  return {\n    type\n  };\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3; // Reconciling\n\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2; // Text node modes\n\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2; // IS_INERT = 3\n// Text node formatting\n\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT; // Text node details\n\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1; // Element node formatting\n\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6; // Reconciliation\n\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b'; // For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\n\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n'; // For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\n\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF'; // eslint-disable-next-line no-misleading-character-class\n\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']'); // eslint-disable-next-line no-misleading-character-class\n\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcesssingMutations() {\n  return isProcessingMutations;\n}\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\nfunction isManagedLineBreak(dom, target, editor) {\n  return (\n    // @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom ||\n    // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\nfunction handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n  const text = target.nodeValue;\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement(); // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            handleTextMutation(\n            // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true; // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n\n          const addedDOMs = mutation.addedNodes;\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      } // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n              if (correctDOM === null) {\n                continue;\n              }\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      } // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n\n      const records = observer.takeRecords(); // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        } // Clear any of those removal mutations\n\n        observer.takeRecords();\n      }\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction flushRootMutations(editor) {\n  const observer = editor._observer;\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet keyCounter = 1;\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n  if (activeElement === null) {\n    return false;\n  }\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' &&\n  // @ts-ignore iternal field\n  activeElement.__lexicalEditor == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) &&\n    // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    // @ts-expect-error: internal field\n    const editor = currentNode.__lexicalEditor;\n    if (editor != null) {\n      return editor;\n    }\n    currentNode = getParentElement(currentNode);\n  }\n  return null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  const isStateFlagPresent = format & activeFormat;\n  if (isStateFlagPresent && (alignWithFormat === null || (alignWithFormat & activeFormat) === 0)) {\n    // Remove the state flag.\n    return format ^ activeFormat;\n  }\n  if (alignWithFormat === null || alignWithFormat & activeFormat) {\n    // Add the state flag.\n    return format | activeFormat;\n  }\n  return format;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    node.__key = existingKey;\n    return;\n  }\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n  editorState._nodeMap.set(key, node); // TODO Split this function into leaf/element\n\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n  editor._cloneNotNeeded.add(key);\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n    const node = nodeMap.get(nextParentKey);\n    if (node === undefined) {\n      break;\n    }\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling(); // TODO: this function duplicates a bunch of operations, can be simplified.\n\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n      writableNode.__prev = null;\n    }\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n      writableNode.__next = null;\n    }\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n} // Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\n\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n  const node = editorState._nodeMap.get(key);\n  if (node === undefined) {\n    return null;\n  }\n  return node;\n}\nfunction getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor(); // @ts-ignore We intentionally add this to the Node.\n\n  const key = dom[`__lexicalKey_${editor._key}`];\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n  while (dom != null) {\n    const node = getNodeFromDOMNode(dom, editorState);\n    if (node !== null) {\n      return node;\n    }\n    dom = getParentElement(dom);\n  }\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n    if (editorState.isEmpty()) {\n      return;\n    }\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n    const nodeMap = editorState._nodeMap;\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n    selection.dirty = true;\n    selection._cachedNodes = null;\n  }\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  flushRootMutations(editor);\n}\nfunction getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n    return null;\n  }\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction getNodeKeyFromDOM(\n// Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n    if (key !== undefined) {\n      return key;\n    }\n    node = getParentElement(node);\n  }\n  return null;\n}\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n  if (domSelection === null) {\n    return;\n  }\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n    if (textContent !== null && $isTextNode(node)) {\n      // Data is intentionally truthy, as we check for boolean, null and empty string.\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n    const prevTextContent = node.getTextContent();\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n        if (!IS_SAFARI && !IS_IOS) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n        return;\n      }\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing ||\n      // Check if character was added at the start, and we need\n      // to clear this input from occurring as that action wasn't\n      // permitted.\n      parent !== null && $isRangeSelection(prevSelection) && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0) {\n        node.markDirty();\n        return;\n      }\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n} // This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\n\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(keyCode, altKey, ctrlKey, metaKey) {\n  return keyCode === 9 && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 66 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 73 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 85 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(keyCode, shiftKey) {\n  return isReturn(keyCode) && !shiftKey;\n}\nfunction isLineBreak(keyCode, shiftKey) {\n  return isReturn(keyCode) && shiftKey;\n} // Inserts a new line after the selection\n\nfunction isOpenLineBreak(keyCode, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && keyCode === 79;\n}\nfunction isDeleteWordBackward(keyCode, altKey, ctrlKey) {\n  return isBackspace(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(keyCode, altKey, ctrlKey) {\n  return isDelete(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(keyCode);\n}\nfunction isDeleteLineForward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isDelete(keyCode);\n}\nfunction isDeleteBackward(keyCode, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n    return isBackspace(keyCode) || keyCode === 72 && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isBackspace(keyCode);\n}\nfunction isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n    return isDelete(keyCode) || keyCode === 68 && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isDelete(keyCode);\n}\nfunction isUndo(keyCode, shiftKey, metaKey, ctrlKey) {\n  return keyCode === 90 && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return keyCode === 90 && metaKey && shiftKey;\n  }\n  return keyCode === 89 && ctrlKey || keyCode === 90 && ctrlKey && shiftKey;\n}\nfunction isCopy(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (keyCode === 67) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isCut(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (keyCode === 88) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isArrowLeft(keyCode) {\n  return keyCode === 37;\n}\nfunction isArrowRight(keyCode) {\n  return keyCode === 39;\n}\nfunction isArrowUp(keyCode) {\n  return keyCode === 38;\n}\nfunction isArrowDown(keyCode) {\n  return keyCode === 40;\n}\nfunction isMoveBackward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(keyCode, ctrlKey, metaKey) {\n  return isArrowUp(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(keyCode, ctrlKey, metaKey) {\n  return isArrowDown(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(keyCode) {\n  return keyCode === 32;\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n  return ctrlKey;\n}\nfunction isReturn(keyCode) {\n  return keyCode === 13;\n}\nfunction isBackspace(keyCode) {\n  return keyCode === 8;\n}\nfunction isEscape(keyCode) {\n  return keyCode === 27;\n}\nfunction isDelete(keyCode) {\n  return keyCode === 46;\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  const classNames = classNamesTheme[classNameThemeType]; // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n\n  if (typeof classNames === 'string') {\n    const classNamesArr = classNames.split(' ');\n    classNamesTheme[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n  const prevMutation = mutatedNodesByType.get(nodeKey); // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const editorState = getActiveEditorState();\n  const readOnly = editorState._readOnly;\n  const klassType = klass.getType();\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && (readOnly || node.isAttached())) {\n      nodesOfType.push(node);\n    }\n  }\n  return nodesOfType;\n}\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n      return possibleNode;\n    }\n  }\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n  if (defaultView === null) {\n    return;\n  }\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n    let diff = 0;\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n    if (isBodyElement) {\n      break;\n    }\n    element = getParentElement(element);\n  }\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (offset !== 0) {\n    {\n      throw Error(`TODO`);\n    }\n  }\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n    parent = parent.getParentOrThrow();\n  }\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\nfunction $copyNode(node) {\n  // @ts-ignore\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n  const replaceFunc = registeredNode.replace;\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n    return replacementNode;\n  }\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = blockCursorTheme.split(' '); // @ts-expect-error: intentional\n\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n  return element;\n}\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n      rootElement.style.caretColor = 'transparent';\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n      return;\n    }\n  } // Remove cursor\n\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n      delete decorators[key];\n    }\n  }\n}\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, dirtyNodes) {\n  let child = node.getFirstChild();\n  while (child !== null) {\n    const childKey = child.__key;\n    if (child !== undefined && child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, dirtyNodes);\n      } // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n      nodeMap.delete(childKey);\n    }\n    child = child.isAttached() ? child.getNextSibling() : null;\n  }\n}\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n      nodeMap.delete(nodeKey);\n    }\n  }\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, dirtyElements);\n        } // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n        nodeMap.delete(nodeKey);\n      }\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  } // Backward\n\n  let previousNode;\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  } // Forward\n\n  let nextNode;\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  } // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\nfunction setElementIndent(dom, indent) {\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : indent * 20 + 'px');\n}\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\nfunction createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1); // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      createChildrenWithDirection(children, endIndex, node, dom);\n      if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n        subTreeTextContent += DOUBLE_LINE_BREAK; // @ts-expect-error: internal field\n\n        dom.__lexicalTextContent = subTreeTextContent;\n      }\n    }\n    const format = node.__format;\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      } // Decorators are always non editable\n\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\nfunction createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  createChildren(children, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction createChildren(children, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    createNode(children[startIndex], dom, insertDOM);\n  } // @ts-expect-error: internal field\n\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n} // If we end an element with a LineBreakNode, then we need to add an additional <br>\n\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n      if (element != null) {\n        dom.removeChild(element);\n      } // @ts-expect-error: internal field\n\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br'); // @ts-expect-error: internal field\n\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent =\n  // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent; // @ts-expect-error: internal field\n\n  const previousDirection = dom.__lexicalDir;\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined; // Remove the old theme classes if they exist\n\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = previousDirectionTheme.split(' ');\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        } // @ts-ignore: intentional\n\n        classList.remove(...previousDirectionTheme);\n      }\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = nextDirectionTheme.split(' '); // @ts-expect-error: intentional\n\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        } // Update direction\n\n        dom.dir = direction;\n      }\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n    activeTextDirection = direction; // @ts-expect-error: internal field\n\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent; // @ts-expect-error: internal field\n\n    dom.__lexicalDir = direction;\n  }\n}\nfunction reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n  return children;\n}\nfunction reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n    if (prevFirstChildKey === nextFrstChildKey) {\n      reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = createNode(nextFrstChildKey, null, null);\n      dom.replaceChild(replacementDOM, lastDOM);\n      destroyNode(prevFirstChildKey, null);\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        createChildren(nextChildren, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      reconcileNodeChildren(prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  } // @ts-expect-error: internal field\n\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key); // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      } // @ts-expect-error: internal field\n\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n    return dom;\n  } // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  } // Update node. If it returns true, we need to unmount and re-create the node\n\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = createNode(key, null, null);\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n    const nextFormat = nextNode.__format;\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n    if (isDirty) {\n      reconcileChildrenWithDirection(prevNode, nextNode, dom);\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    nextNode = nextNode.getWritable();\n    nextNode.__cachedText = editorTextContent;\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n  return dom;\n}\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n  pendingDecorators[key] = decorator;\n}\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\nfunction reconcileNodeChildren(prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n          reconcileNode(nextKey, dom);\n        }\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n  }\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    createChildren(nextChildren, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\nfunction reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = ''; // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap); // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  reconcileNode('root', null); // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n\n  activeEditor$1 = undefined; // @ts-ignore\n\n  activeEditorNodes = undefined; // @ts-ignore\n\n  activeDirtyElements = undefined; // @ts-ignore\n\n  activeDirtyLeaves = undefined; // @ts-ignore\n\n  activePrevNodeMap = undefined; // @ts-ignore\n\n  activeNextNodeMap = undefined; // @ts-ignore\n\n  activeEditorConfig = undefined; // @ts-ignore\n\n  activePrevKeyToDOMMap = undefined; // @ts-ignore\n\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap; // @ts-ignore We intentionally add this to the Node.\n\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = 0;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet rootElementsRegistered = 0;\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, 0, 'root', 0]; // This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key ||\n  // If we're working with a non-text node.\n  !$isTextNode(anchorNode) ||\n  // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT ||\n  // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() ||\n  // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) ||\n  // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 ||\n  // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) ||\n  // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format ||\n  // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false; // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n    const selection = $getSelection(); // Update the selection format\n\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        } // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n        } else {\n          if (anchor.type === 'text') {\n            selection.format = anchorNode.getFormat();\n          } else if (anchor.type === 'element') {\n            selection.format = 0;\n          }\n        }\n      } else {\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n          if ($isTextNode(node)) {\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n} // This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\n\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (domSelection && anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n        domSelection.removeAllRanges();\n        selection.dirty = true;\n      }\n    }\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\nfunction $applyTargetRange(selection, event) {\n  if (event.getTargetRanges) {\n    const targetRange = event.getTargetRanges()[0];\n    if (targetRange) {\n      selection.applyDOMRange(targetRange);\n    }\n  }\n}\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 229 && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType; // We let the browser do its own thing for composition.\n\n  if (inputType === 'deleteCompositionText' ||\n  // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n        $setSelection(prevSelection.clone());\n      }\n      if ($isRangeSelection(selection)) {\n        // Used for handling backspace in Android.\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && selection.anchor.key === selection.focus.key) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0; // Fixes an Android bug where selection flickers when backspacing\n\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n          }\n        } else {\n          event.preventDefault();\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n        }\n        return;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n    const data = event.data;\n    if (!selection.dirty && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode())) {\n      $applyTargetRange(selection, event);\n    }\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    } // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n\n    event.preventDefault();\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null); // Some browsers do not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n\n          if (isInsertLineBreak) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, undefined);\n          break;\n        }\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n    }\n  });\n}\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n      if (domSelection === null) {\n        return;\n      }\n      const offset = anchor.offset; // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, offset) + data + anchorNode.getTextContent().slice(offset + selection.focus.offset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      const textLength = data.length; // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      } // This ensures consistency on Android.\n\n      if (!IS_SAFARI && !IS_IOS && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      $updateSelectedTextFromDOM(false, editor); // onInput always fires after onCompositionEnd for FF.\n\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    } // Also flush any other mutations that might have occurred\n    // since the change.\n\n    $flushMutations();\n  });\n}\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      $setCompositionKey(anchor.key);\n      if (\n      // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY ||\n      // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || selection.anchor.getNode().getFormat() !== selection.format) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\nfunction onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null); // Handle termination of composition.\n\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n      return;\n    } // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n  $updateSelectedTextFromDOM(true, editor, data);\n}\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.keyCode;\n  if (editor.isComposing()) {\n    return;\n  }\n  const {\n    keyCode,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n  if (isMoveForward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(keyCode, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(keyCode)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(keyCode, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(keyCode, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(keyCode, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(keyCode)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(keyCode)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(keyCode)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(keyCode, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      }\n    }\n  }\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n  if (eventHandles === undefined) {\n    eventHandles = []; // @ts-expect-error: internal field\n\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n  return eventHandles;\n} // Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\n\nconst activeNestedEditorsMap = new Map();\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n  if (domSelection === null) {\n    return;\n  }\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n  if (nextActiveEditor === null) {\n    return;\n  }\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n      if (domAnchorNode === null) {\n        return;\n      }\n      const nodeType = domAnchorNode.nodeType; // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n      const newSelection = internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor);\n      $setSelection(newSelection);\n    });\n  } // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n  onSelectionChange(domSelection, nextActiveEditor, true); // If newly selected editor is nested, then add it to the map, clean map otherwise\n\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  if (rootElementsRegistered === 0) {\n    const doc = rootElement.ownerDocument;\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  rootElementsRegistered++; // @ts-expect-error: internal field\n\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable()) {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable()) {\n        switch (eventName) {\n          case 'cut':\n            return dispatchCommand(editor, CUT_COMMAND, event);\n          case 'copy':\n            return dispatchCommand(editor, COPY_COMMAND, event);\n          case 'paste':\n            return dispatchCommand(editor, PASTE_COMMAND, event);\n          case 'dragstart':\n            return dispatchCommand(editor, DRAGSTART_COMMAND, event);\n          case 'dragover':\n            return dispatchCommand(editor, DRAGOVER_COMMAND, event);\n          case 'dragend':\n            return dispatchCommand(editor, DRAGEND_COMMAND, event);\n          case 'focus':\n            return dispatchCommand(editor, FOCUS_COMMAND, event);\n          case 'blur':\n            {\n              return dispatchCommand(editor, BLUR_COMMAND, event);\n            }\n          case 'drop':\n            return dispatchCommand(editor, DROP_COMMAND, event);\n        }\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  if (rootElementsRegistered !== 0) {\n    rootElementsRegistered--; // We only want to have a single global selectionchange event handler, shared\n    // between all editor instances.\n\n    if (rootElementsRegistered === 0) {\n      const doc = rootElement.ownerDocument;\n      doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n    }\n  } // @ts-expect-error: internal field\n\n  const editor = rootElement.__lexicalEditor;\n  if (editor !== null && editor !== undefined) {\n    cleanActiveNestedEditorsMap(editor); // @ts-expect-error: internal field\n\n    rootElement.__lexicalEditor = null;\n  }\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  } // @ts-expect-error: internal field\n\n  rootElement.__lexicalEventHandles = [];\n}\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n    return aNode.isBefore(bNode);\n  }\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n    return node;\n  }\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n      if (selection !== null) {\n        selection._cachedNodes = null;\n        selection.dirty = true;\n      }\n    }\n  }\n}\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n  point.set(key, offset, type);\n}\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\nfunction $transferStartingElementPointToTextPoint(start, end, format) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  } // Transfer the element point to a text point.\n\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n  start.set(textNode.__key, 0, 'text');\n}\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\nclass NodeSelection {\n  constructor(objects) {\n    this.dirty = false;\n    this._nodes = objects;\n    this._cachedNodes = null;\n  }\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n  add(key) {\n    this.dirty = true;\n    this._nodes.add(key);\n    this._cachedNodes = null;\n  }\n  delete(key) {\n    this.dirty = true;\n    this._nodes.delete(key);\n    this._cachedNodes = null;\n  }\n  clear() {\n    this.dirty = true;\n    this._nodes.clear();\n    this._cachedNodes = null;\n  }\n  has(key) {\n    return this._nodes.has(key);\n  }\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {// Do nothing?\n  }\n  insertText() {// Do nothing?\n  }\n  insertNodes(nodes, selectStart) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd; // Insert nodes\n\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n    selectionAtEnd.insertNodes(nodes, selectStart); // Remove selected nodes\n\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n    return true;\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const objects = this._nodes;\n    const nodes = [];\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass GridSelection {\n  constructor(gridKey, anchor, focus) {\n    this.gridKey = gridKey;\n    this.anchor = anchor;\n    this.focus = focus;\n    this.dirty = false;\n    this._cachedNodes = null;\n    anchor._selection = this;\n    focus._selection = this;\n  }\n  is(selection) {\n    if (!DEPRECATED_$isGridSelection(selection)) {\n      return false;\n    }\n    return this.gridKey === selection.gridKey && this.anchor.is(selection.anchor) && this.focus.is(selection.focus);\n  }\n  set(gridKey, anchorCellKey, focusCellKey) {\n    this.dirty = true;\n    this.gridKey = gridKey;\n    this.anchor.key = anchorCellKey;\n    this.focus.key = focusCellKey;\n    this._cachedNodes = null;\n  }\n  clone() {\n    return new GridSelection(this.gridKey, this.anchor, this.focus);\n  }\n  isCollapsed() {\n    return false;\n  }\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getCharacterOffsets() {\n    return getCharacterOffsets(this);\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {// Do nothing?\n  }\n  insertText() {// Do nothing?\n  }\n  insertNodes(nodes, selectStart) {\n    const focusNode = this.focus.getNode();\n    const selection = $normalizeSelection(focusNode.select(0, focusNode.getChildrenSize()));\n    return selection.insertNodes(nodes, selectStart);\n  }\n  getShape() {\n    const anchorCellNode = $getNodeByKey(this.anchor.key);\n    if (!(anchorCellNode !== null)) {\n      throw Error(`getNodes: expected to find AnchorNode`);\n    }\n    const anchorCellNodeIndex = anchorCellNode.getIndexWithinParent();\n    const anchorCelRoweIndex = anchorCellNode.getParentOrThrow().getIndexWithinParent();\n    const focusCellNode = $getNodeByKey(this.focus.key);\n    if (!(focusCellNode !== null)) {\n      throw Error(`getNodes: expected to find FocusNode`);\n    }\n    const focusCellNodeIndex = focusCellNode.getIndexWithinParent();\n    const focusCellRowIndex = focusCellNode.getParentOrThrow().getIndexWithinParent();\n    const startX = Math.min(anchorCellNodeIndex, focusCellNodeIndex);\n    const stopX = Math.max(anchorCellNodeIndex, focusCellNodeIndex);\n    const startY = Math.min(anchorCelRoweIndex, focusCellRowIndex);\n    const stopY = Math.max(anchorCelRoweIndex, focusCellRowIndex);\n    return {\n      fromX: Math.min(startX, stopX),\n      fromY: Math.min(startY, stopY),\n      toX: Math.max(startX, stopX),\n      toY: Math.max(startY, stopY)\n    };\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const nodesSet = new Set();\n    const {\n      fromX,\n      fromY,\n      toX,\n      toY\n    } = this.getShape();\n    const gridNode = $getNodeByKey(this.gridKey);\n    if (!DEPRECATED_$isGridNode(gridNode)) {\n      {\n        throw Error(`getNodes: expected to find GridNode`);\n      }\n    }\n    nodesSet.add(gridNode);\n    const gridRowNodes = gridNode.getChildren();\n    for (let r = fromY; r <= toY; r++) {\n      const gridRowNode = gridRowNodes[r];\n      nodesSet.add(gridRowNode);\n      if (!DEPRECATED_$isGridRowNode(gridRowNode)) {\n        {\n          throw Error(`getNodes: expected to find GridRowNode`);\n        }\n      }\n      const gridCellNodes = gridRowNode.getChildren();\n      for (let c = fromX; c <= toX; c++) {\n        const gridCellNode = gridCellNodes[c];\n        if (!DEPRECATED_$isGridCellNode(gridCellNode)) {\n          {\n            throw Error(`getNodes: expected to find GridCellNode`);\n          }\n        }\n        nodesSet.add(gridCellNode);\n        const children = gridCellNode.getChildren();\n        while (children.length > 0) {\n          const child = children.shift();\n          nodesSet.add(child);\n          if ($isElementNode(child)) {\n            children.unshift(...child.getChildren());\n          }\n        }\n      }\n    }\n    const nodes = Array.from(nodesSet);\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction DEPRECATED_$isGridSelection(x) {\n  return x instanceof GridSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format) {\n    this.anchor = anchor;\n    this.focus = focus;\n    this.dirty = false;\n    this.format = format;\n    this._cachedNodes = null;\n    anchor._selection = this;\n    focus._selection = this;\n  }\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format;\n  }\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = anchor.getNode();\n    let lastNode = focus.getNode();\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(anchor.offset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n    if ($isElementNode(lastNode)) {\n      const lastNodeDescendant = lastNode.getDescendantByIndex(focus.offset);\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n    let nodes;\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    if (nodes.length === 0) {\n      return '';\n    }\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n          if (node === firstNode) {\n            if (node === lastNode) {\n              text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n    return textContent;\n  }\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format);\n    return selection;\n  }\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n  insertRawText(text) {\n    const parts = text.split(/\\r?\\n/);\n    if (parts.length === 1) {\n      this.insertText(text);\n    } else {\n      const nodes = [];\n      const length = parts.length;\n      for (let i = 0; i < length; i++) {\n        const part = parts[i];\n        if (part !== '') {\n          nodes.push($createTextNode(part));\n        }\n        if (i !== length - 1) {\n          nodes.push($createLineBreakNode());\n        }\n      }\n      this.insertNodes(nodes);\n    }\n  }\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = this.isCollapsed() || anchor.isBefore(focus);\n    const format = this.format;\n    if (isBefore && anchor.type === 'element') {\n      $transferStartingElementPointToTextPoint(anchor, focus, format);\n    } else if (!isBefore && focus.type === 'element') {\n      $transferStartingElementPointToTextPoint(focus, anchor, format);\n    }\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const firstPoint = isBefore ? anchor : focus;\n    const endPoint = isBefore ? focus : anchor;\n    const startOffset = firstPoint.offset;\n    const endOffset = endPoint.offset;\n    let firstNode = selectedNodes[0];\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n      if (!$isTextNode(nextSibling) || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n      prevSibling.select();\n      firstNode = prevSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const firstNodeFormat = firstNode.getFormat();\n      if (startOffset === endOffset && firstNodeFormat !== format) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.select();\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          } // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n          return;\n        }\n      }\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]); // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode; // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      } // Handle mutations to the last node.\n\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n          lastNode = lastNode.spliceText(0, endOffset, '');\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      } // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement); // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n          parent = parent.getParent();\n        }\n      } // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      } // Remove all selected nodes that haven't already been removed.\n\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n  removeText() {\n    this.insertText('');\n  }\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType); // When changing format, we should stop composition\n\n      $setCompositionKey(null);\n      return;\n    }\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n    const selectedTextNodesLength = selectedTextNodes.length;\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType); // When changing format, we should stop composition\n\n      $setCompositionKey(null);\n      return;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset; // In case selection started at the end of text node use next text node\n\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n    if (firstNode == null) {\n      return;\n    }\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize(); // Single node selected\n\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      } // The entire node is selected, so just format it\n\n      if (startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat); // Update selection only if starts/ends on text node\n\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n      this.format = firstNextFormat;\n      return;\n    } // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n\n    if (startOffset !== 0) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat); // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize()) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      lastNode.setFormat(lastNextFormat);\n    } // Process all text nodes in between\n\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n      if (!textNode.isToken()) {\n        const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n        textNode.setFormat(nextFormat);\n      }\n    } // Update selection only if starts/ends on text node\n\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n    this.format = firstNextFormat | lastNextFormat;\n  }\n  insertNodes(nodes, selectStart) {\n    // If there is a range selected remove the text in it\n    if (!this.isCollapsed()) {\n      const selectionEnd = this.isBackward() ? this.anchor : this.focus;\n      const nextSibling = selectionEnd.getNode().getNextSibling();\n      const nextSiblingKey = nextSibling ? nextSibling.getKey() : null;\n      const prevSibling = selectionEnd.getNode().getPreviousSibling();\n      const prevSiblingKey = prevSibling ? prevSibling.getKey() : null;\n      this.removeText(); // If the selection has been moved to an adjacent inline element, create\n      // a temporary text node that we can insert the nodes after.\n\n      if (this.isCollapsed() && this.focus.type === 'element') {\n        let textNode;\n        if (this.focus.key === nextSiblingKey && this.focus.offset === 0) {\n          textNode = $createTextNode();\n          this.focus.getNode().insertBefore(textNode);\n        } else if (this.focus.key === prevSiblingKey && this.focus.offset === this.focus.getNode().getChildrenSize()) {\n          textNode = $createTextNode();\n          this.focus.getNode().insertAfter(textNode);\n        }\n        if (textNode) {\n          this.focus.set(textNode.__key, 0, 'text');\n          this.anchor.set(textNode.__key, 0, 'text');\n        }\n      }\n    }\n    const anchor = this.anchor;\n    const anchorOffset = anchor.offset;\n    const anchorNode = anchor.getNode();\n    let target = anchorNode;\n    if (anchor.type === 'element') {\n      const element = anchor.getNode();\n      const placementNode = element.getChildAtIndex(anchorOffset - 1);\n      if (placementNode === null) {\n        target = element;\n      } else {\n        target = placementNode;\n      }\n    }\n    const siblings = []; // Get all remaining text node siblings in this element so we can\n    // append them after the last node we're inserting.\n\n    const nextSiblings = anchorNode.getNextSiblings();\n    const topLevelElement = $isRootOrShadowRoot(anchorNode) ? null : anchorNode.getTopLevelElementOrThrow();\n    if ($isTextNode(anchorNode)) {\n      const textContent = anchorNode.getTextContent();\n      const textContentLength = textContent.length;\n      if (anchorOffset === 0 && textContentLength !== 0) {\n        const prevSibling = anchorNode.getPreviousSibling();\n        if (prevSibling !== null) {\n          target = prevSibling;\n        } else {\n          target = anchorNode.getParentOrThrow();\n        }\n        siblings.push(anchorNode);\n      } else if (anchorOffset === textContentLength) {\n        target = anchorNode;\n      } else if (anchorNode.isToken()) {\n        // Do nothing if we're inside a token node\n        return false;\n      } else {\n        // If we started with a range selected grab the danglingText after the\n        // end of the selection and put it on our siblings array so we can\n        // append it after the last node we're inserting\n        let danglingText;\n        [target, danglingText] = anchorNode.splitText(anchorOffset);\n        siblings.push(danglingText);\n      }\n    }\n    const startingNode = target;\n    siblings.push(...nextSiblings);\n    const firstNode = nodes[0];\n    let didReplaceOrMerge = false;\n    let lastNode = null; // Time to insert the nodes!\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (!$isDecoratorNode(target) && $isElementNode(node) && !node.isInline()) {\n        // -----\n        // Heuristics for the replacement or merging of elements\n        // -----\n        // If we have an incoming element node as the first node, then we'll need\n        // see if we can merge any descendant leaf nodes into our existing target.\n        // We can do this by finding the first descendant in our node and then we can\n        // pluck it and its parent (siblings included) out and insert them directly\n        // into our target. We only do this for the first node, as we are only\n        // interested in merging with the anchor, which is our target.\n        //\n        // If we apply either the replacement or merging heuristics, we need to be\n        // careful that we're not trying to insert a non-element node into a root node,\n        // so we check if the target's parent after this logic is the root node and if\n        // so we trigger an invariant to ensure this problem is caught in development\n        // and fixed accordingly.\n        if (node.is(firstNode)) {\n          if ($isElementNode(target) && target.isEmpty() && target.canReplaceWith(node)) {\n            target.replace(node);\n            target = node;\n            didReplaceOrMerge = true;\n            continue;\n          } // We may have a node tree where there are many levels, for example with\n          // lists and tables. So let's find the first descendant to try and merge\n          // with. So if we have the target:\n          //\n          // Paragraph (1)\n          //   Text (2)\n          //\n          // and we are trying to insert:\n          //\n          // ListNode (3)\n          //   ListItemNode (4)\n          //     Text (5)\n          //   ListItemNode (6)\n          //\n          // The result would be:\n          //\n          // Paragraph (1)\n          //   Text (2)\n          //   Text (5)\n          //\n\n          const firstDescendant = node.getFirstDescendant();\n          if ($isLeafNode(firstDescendant)) {\n            let element = firstDescendant.getParentOrThrow();\n            while (element.isInline()) {\n              element = element.getParentOrThrow();\n            }\n            const children = element.getChildren();\n            const childrenLength = children.length;\n            if ($isElementNode(target)) {\n              let firstChild = target.getFirstChild();\n              for (let s = 0; s < childrenLength; s++) {\n                const child = children[s];\n                if (firstChild === null) {\n                  target.append(child);\n                } else {\n                  firstChild.insertAfter(child);\n                }\n                firstChild = child;\n              }\n            } else {\n              for (let s = childrenLength - 1; s >= 0; s--) {\n                target.insertAfter(children[s]);\n              }\n              target = target.getParentOrThrow();\n            }\n            lastNode = children[childrenLength - 1];\n            element.remove();\n            didReplaceOrMerge = true;\n            if (element.is(node)) {\n              continue;\n            }\n          }\n        }\n        if ($isTextNode(target)) {\n          if (topLevelElement === null) {\n            {\n              throw Error(`insertNode: topLevelElement is root node`);\n            }\n          }\n          target = topLevelElement;\n        }\n      } else if (didReplaceOrMerge && !$isDecoratorNode(node) && $isRootOrShadowRoot(target.getParent())) {\n        {\n          throw Error(`insertNodes: cannot insert a non-element into a root node`);\n        }\n      }\n      didReplaceOrMerge = false;\n      if ($isElementNode(target) && !target.isInline()) {\n        lastNode = node;\n        if ($isDecoratorNode(node) && !node.isInline()) {\n          target = target.insertAfter(node, false);\n        } else if (!$isElementNode(node)) {\n          const firstChild = target.getFirstChild();\n          if (firstChild !== null) {\n            firstChild.insertBefore(node);\n          } else {\n            target.append(node);\n          }\n          target = node;\n        } else {\n          if (!node.canBeEmpty() && node.isEmpty()) {\n            continue;\n          }\n          if ($isRootNode(target)) {\n            const placementNode = target.getChildAtIndex(anchorOffset);\n            if (placementNode !== null) {\n              placementNode.insertBefore(node);\n            } else {\n              target.append(node);\n            }\n            target = node;\n          } else {\n            target = target.insertAfter(node, false);\n          }\n        }\n      } else if (!$isElementNode(node) || $isElementNode(node) && node.isInline() || $isDecoratorNode(target) && !target.isInline()) {\n        lastNode = node;\n        target = target.insertAfter(node, false);\n      } else {\n        const nextTarget = target.getParentOrThrow(); // if we're inserting an Element after a LineBreak, we want to move the target to the parent\n        // and remove the LineBreak so we don't have empty space.\n\n        if ($isLineBreakNode(target)) {\n          target.remove();\n        }\n        target = nextTarget; // Re-try again with the target being the parent\n\n        i--;\n        continue;\n      }\n    }\n    if (selectStart) {\n      // Handle moving selection to start for all nodes\n      if ($isTextNode(startingNode)) {\n        startingNode.select();\n      } else {\n        const prevSibling = target.getPreviousSibling();\n        if ($isTextNode(prevSibling)) {\n          prevSibling.select();\n        } else {\n          const index = target.getIndexWithinParent();\n          target.getParentOrThrow().select(index, index);\n        }\n      }\n    }\n    if ($isElementNode(target)) {\n      // If the last node to be inserted was a text node,\n      // then we should attempt to move selection to that.\n      const lastChild = $isTextNode(lastNode) ? lastNode : $isElementNode(lastNode) && lastNode.isInline() ? lastNode.getLastDescendant() : target.getLastDescendant();\n      if (!selectStart) {\n        // Handle moving selection to end for elements\n        if (lastChild === null) {\n          target.select();\n        } else if ($isTextNode(lastChild)) {\n          if (lastChild.getTextContent() === '') {\n            lastChild.selectPrevious();\n          } else {\n            lastChild.select();\n          }\n        } else {\n          lastChild.selectNext();\n        }\n      }\n      if (siblings.length !== 0) {\n        const originalTarget = target;\n        for (let i = siblings.length - 1; i >= 0; i--) {\n          const sibling = siblings[i];\n          const prevParent = sibling.getParentOrThrow();\n          if ($isElementNode(target) && !$isBlockElementNode(sibling) && !($isDecoratorNode(sibling) && (\n          // Note: We are only looking for decorators that are inline and not isolated.\n          !sibling.isInline() || sibling.isIsolated()))) {\n            if (originalTarget === target) {\n              target.append(sibling);\n            } else {\n              target.insertBefore(sibling);\n            }\n            target = sibling;\n          } else if (!$isElementNode(target) && !$isBlockElementNode(sibling)) {\n            target.insertBefore(sibling);\n            target = sibling;\n          } else {\n            if ($isElementNode(sibling) && !sibling.canInsertAfter(target)) {\n              // @ts-ignore The clone method does exist on the constructor.\n              const prevParentClone = prevParent.constructor.clone(prevParent);\n              if (!$isElementNode(prevParentClone)) {\n                {\n                  throw Error(`insertNodes: cloned parent clone is not an element`);\n                }\n              }\n              prevParentClone.append(sibling);\n              target.insertAfter(prevParentClone);\n            } else {\n              target.insertAfter(sibling);\n            }\n          } // Check if the prev parent is empty, as it might need\n          // removing.\n\n          if (prevParent.isEmpty() && !prevParent.canBeEmpty()) {\n            prevParent.remove();\n          }\n        }\n      }\n    } else if (!selectStart) {\n      // Handle moving selection to end for other nodes\n      if ($isTextNode(target)) {\n        target.select();\n      } else {\n        const element = target.getParentOrThrow();\n        const index = target.getIndexWithinParent() + 1;\n        element.select(index, index);\n      }\n    }\n    return true;\n  }\n  insertParagraph() {\n    if (!this.isCollapsed()) {\n      this.removeText();\n    }\n    const anchor = this.anchor;\n    const anchorOffset = anchor.offset;\n    let currentElement;\n    let nodesToMove = [];\n    let siblingsToMove = [];\n    if (anchor.type === 'text') {\n      const anchorNode = anchor.getNode();\n      nodesToMove = anchorNode.getNextSiblings().reverse();\n      currentElement = anchorNode.getParentOrThrow();\n      const isInline = currentElement.isInline();\n      const textContentLength = isInline ? currentElement.getTextContentSize() : anchorNode.getTextContentSize();\n      if (anchorOffset === 0) {\n        nodesToMove.push(anchorNode);\n      } else {\n        if (isInline) {\n          // For inline nodes, we want to move all the siblings to the new paragraph\n          // if selection is at the end, we just move the siblings. Otherwise, we also\n          // split the text node and add that and it's siblings below.\n          siblingsToMove = currentElement.getNextSiblings();\n        }\n        if (anchorOffset !== textContentLength) {\n          if (!isInline || anchorOffset !== anchorNode.getTextContentSize()) {\n            const [, splitNode] = anchorNode.splitText(anchorOffset);\n            nodesToMove.push(splitNode);\n          }\n        }\n      }\n    } else {\n      currentElement = anchor.getNode();\n      if ($isRootOrShadowRoot(currentElement)) {\n        const paragraph = $createParagraphNode();\n        const child = currentElement.getChildAtIndex(anchorOffset);\n        paragraph.select();\n        if (child !== null) {\n          child.insertBefore(paragraph, false);\n        } else {\n          currentElement.append(paragraph);\n        }\n        return;\n      }\n      nodesToMove = currentElement.getChildren().slice(anchorOffset).reverse();\n    }\n    const nodesToMoveLength = nodesToMove.length;\n    if (anchorOffset === 0 && nodesToMoveLength > 0 && currentElement.isInline()) {\n      const parent = currentElement.getParentOrThrow();\n      const newElement = parent.insertNewAfter(this, false);\n      if ($isElementNode(newElement)) {\n        const children = parent.getChildren();\n        for (let i = 0; i < children.length; i++) {\n          newElement.append(children[i]);\n        }\n      }\n      return;\n    }\n    const newElement = currentElement.insertNewAfter(this, false);\n    if (newElement === null) {\n      // Handle as a line break insertion\n      this.insertLineBreak();\n    } else if ($isElementNode(newElement)) {\n      // If we're at the beginning of the current element, move the new element to be before the current element\n      const currentElementFirstChild = currentElement.getFirstChild();\n      const isBeginning = anchorOffset === 0 && (currentElement.is(anchor.getNode()) || currentElementFirstChild && currentElementFirstChild.is(anchor.getNode()));\n      if (isBeginning && nodesToMoveLength > 0) {\n        currentElement.insertBefore(newElement);\n        return;\n      }\n      let firstChild = null;\n      const siblingsToMoveLength = siblingsToMove.length;\n      const parent = newElement.getParentOrThrow(); // For inline elements, we append the siblings to the parent.\n\n      if (siblingsToMoveLength > 0) {\n        for (let i = 0; i < siblingsToMoveLength; i++) {\n          const siblingToMove = siblingsToMove[i];\n          parent.append(siblingToMove);\n        }\n      }\n      if (nodesToMoveLength !== 0) {\n        for (let i = 0; i < nodesToMoveLength; i++) {\n          const nodeToMove = nodesToMove[i];\n          if (firstChild === null) {\n            newElement.append(nodeToMove);\n          } else {\n            firstChild.insertBefore(nodeToMove);\n          }\n          firstChild = nodeToMove;\n        }\n      }\n      if (!newElement.canBeEmpty() && newElement.getChildrenSize() === 0) {\n        newElement.selectPrevious();\n        newElement.remove();\n      } else {\n        newElement.selectStart();\n      }\n    }\n  }\n  insertLineBreak(selectStart) {\n    const lineBreakNode = $createLineBreakNode();\n    const anchor = this.anchor;\n    if (anchor.type === 'element') {\n      const element = anchor.getNode();\n      if ($isRootNode(element)) {\n        this.insertParagraph();\n      }\n    }\n    if (selectStart) {\n      this.insertNodes([lineBreakNode], true);\n    } else {\n      if (this.insertNodes([lineBreakNode])) {\n        lineBreakNode.selectNext(0, 0);\n      }\n    }\n  }\n  getCharacterOffsets() {\n    return getCharacterOffsets(this);\n  }\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = getCharacterOffsets(this);\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n      return [firstNode];\n    }\n    const isBefore = anchor.isBefore(focus);\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n    return selectedNodes;\n  }\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move'; // Handle the selection movement around decorators.\n\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n          if (!isBackward) {\n            offset++;\n          }\n        }\n        focus.set(elementKey, offset, 'element');\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n        return;\n      }\n    }\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return;\n    }\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement; // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    } // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity); // Guard against no ranges\n\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0); // Apply the DOM selection to our Lexical selection.\n\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        } // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n  deleteCharacter(isBackward) {\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const focus = this.focus;\n      let anchorNode = anchor.getNode();\n      if (!isBackward && (\n      // Delete forward handle case\n      anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n        const parent = anchorNode.getParent();\n        const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n        if ($isElementNode(nextSibling) && !nextSibling.canExtractContents()) {\n          return;\n        }\n      } // Handle the deletion around decorators.\n\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n        }\n        return;\n      }\n      this.modify('extend', isBackward, 'character');\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n    this.removeText();\n  }\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      if (this.anchor.type === 'text') {\n        this.modify('extend', isBackward, 'lineboundary');\n      } // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n\n      const endPoint = isBackward ? this.focus : this.anchor;\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n    }\n    this.removeText();\n  }\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      this.modify('extend', isBackward, 'word');\n    }\n    this.removeText();\n  }\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n  if (point.type === 'text') {\n    return offset;\n  }\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction getCharacterOffsets(selection) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // @ts-expect-error Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n      break;\n    }\n  }\n  const nextTextContent = split.join('').trim();\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode; // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false; // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length; // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n    if (childDOM === editor._blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (editor._blockCursorElement !== null) {\n      resolvedOffset--;\n    }\n    resolvedNode = getNodeFromDOM(childDOM);\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = getNodeFromDOM(dom); // Ensure resolvedElement is actually a element.\n\n      if (resolvedElement === null) {\n        return null;\n      }\n      if ($isElementNode(resolvedElement)) {\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n          if (descendant === null) {\n            resolvedElement = child;\n            resolvedOffset = 0;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n        }\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent(); // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = getNodeFromDOM(dom);\n  }\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize(); // @ts-expect-error: intentional\n\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0; // @ts-expect-error: intentional\n\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\nfunction normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus); // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n    const editor = getActiveEditor();\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\nfunction internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n  const resolvedAnchorPoint = internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n  const resolvedFocusPoint = internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = getNodeFromDOM(anchorDOM);\n    const focusNode = getNodeFromDOM(focusDOM); // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  } // Handle normalization of selection when it is at the boundaries.\n\n  normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n} // This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\nfunction internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0);\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0);\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction DEPRECATED_$createGridSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new GridSelection('root', anchor, focus);\n}\nfunction internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n  if ($isNodeSelection(lastSelection) || DEPRECATED_$isGridSelection(lastSelection)) {\n    return lastSelection.clone();\n  }\n  return internalCreateRangeSelection(lastSelection, domSelection, editor);\n}\nfunction internalCreateRangeSelection(lastSelection, domSelection, editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    return null;\n  } // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n  const windowEvent = windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcesssingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  } // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n\n  const resolvedSelectionPoints = internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset) {\n  let times = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n  const parentKey = parentNode.__key; // Single node. We shift selection but never redimension it\n\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n    if (nodeOffset <= selectionOffset) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element'); // The new selection might point to text nodes, try to resolve them\n\n      $updateSelectionResolveTextNodes(selection);\n    }\n    return;\n  } // Multiple nodes selected. We shift or redimension selection\n\n  const isBackward = selection.isBackward();\n  const firstPoint = isBackward ? focus : anchor;\n  const firstPointNode = firstPoint.getNode();\n  const lastPoint = isBackward ? anchor : focus;\n  const lastPointNode = lastPoint.getNode();\n  if (parentNode.is(firstPointNode)) {\n    const firstPointOffset = firstPoint.offset;\n    if (nodeOffset <= firstPointOffset) {\n      firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n    }\n  }\n  if (parentNode.is(lastPointNode)) {\n    const lastPointOffset = lastPoint.offset;\n    if (nodeOffset <= lastPointOffset) {\n      lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n    }\n  } // The new selection might point to text nodes, try to resolve them\n\n  $updateSelectionResolveTextNodes(selection);\n}\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n    return;\n  }\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement; // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n    return;\n  }\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatChanged = false;\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    anchorFormatChanged = anchor.getNode().getFormat() !== nextFormat;\n  }\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  } // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n  if (isCollapsed && (prevSelection === null || anchorFormatChanged || $isRangeSelection(prevSelection) && prevSelection.format !== nextFormat)) {\n    markCollapsedSelectionFormat(nextFormat, nextAnchorOffset, anchorKey, performance.now());\n  } // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode &&\n  // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n    if (anchor.type !== 'element') {\n      return;\n    }\n  } // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n\n  try {\n    // When updating more than 1000 nodes on Chrome, it's actually better to defer\n    // updating the selection till the next frame. This is because Chrome's\n    // Blink engine has hard limit on how many DOM nodes it can redraw in\n    // a single cycle, so keeping it to the next frame improves performance.\n    // The downside is that is makes the computation within Lexical more\n    // complex, as now, we've sync update the DOM, but selection no longer\n    // matches.\n    if (IS_CHROME && nodeCount > 1000) {\n      window.requestAnimationFrame(() => domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset));\n    } else {\n      domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n    }\n  } catch (error) {// If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n  }\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n    if (selectionTarget !== null) {\n      // @ts-ignore Text nodes do have getBoundingClientRect\n      const selectionRect = selectionTarget.getBoundingClientRect();\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes, selectStart) {\n  let selection = $getSelection();\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n  return selection.insertNodes(nodes, selectStart);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n  if (selection === null) {\n    return '';\n  }\n  return selection.getTextContent();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().`);\n    }\n  }\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().`);\n    }\n  }\n  return activeEditor;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n  const transformsArrLength = transformsArr.length;\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined &&\n  // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\n\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n        dirtyLeaves.add(nodeKey);\n      }\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size; // We want to prioritize node transforms over element transforms\n\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    } // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n      const node = nodeMap.get(nodeKey);\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n  const nodeClass = registeredNode.klass;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n  return node;\n}\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n    if (updateFn) {\n      updateFn();\n    } // Make the editorState immutable\n\n    editorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n  return editorState;\n} // This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = null;\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\nfunction commitPendingUpdates(editor) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n  if (pendingEditorState === null) {\n    return;\n  } // ======\n  // Reconciliation has started.\n  // ======\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false; // We don't want updates to sync block the reconciliation.\n\n    editor._updating = true;\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      } // Reset editor and restore incoming editor state to the DOM\n\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        commitPendingUpdates(editor);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n      Object.freeze(pendingSelection);\n    }\n  }\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  const nodeCount = pendingEditorState._nodeMap.size;\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n  $garbageCollectDetachedDecorators(editor, pendingEditorState); // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window); // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n\n  if (editor._editable &&\n  // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement, nodeCount);\n      }\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, tags, dirtyLeaves);\n  }\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n\n  const pendingDecorators = editor._pendingDecorators;\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n  triggerTextContentListeners(editor, currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  triggerEnqueuedUpdates(editor);\n}\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\nfunction triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, updateTags, dirtyLeaves) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        updateTags\n      });\n    }\n  }\n}\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n    for (var _len = arguments.length, payload = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      payload[_key - 3] = arguments[_key];\n    }\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n  const editors = getEditorsToPropagate(editor);\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      beginUpdate(editor, updateFn, options);\n    }\n  }\n}\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false; // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n      nextUpdateFn();\n    }\n  }\n  return skipTransforms;\n}\nfunction beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection != null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = internalCreateSelection(editor);\n      }\n    }\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n    const endingCompositionKey = editor._compositionKey;\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n    const pendingSelection = pendingEditorState._selection;\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    } // Restore existing editor state to the DOM\n\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n  const windowObj = editor._window;\n  const windowEvent = windowObj !== null ? window.event : null;\n  const eventType = windowEvent != null ? windowEvent.type : null;\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor) || editor._blockCursorElement !== null && eventType === 'blur';\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n  if (parent === null) {\n    return;\n  }\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  }\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    removeNode(parent, restoreSelection);\n  }\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n  constructor(key) {\n    // @ts-expect-error\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type,\n        // @ts-expect-error\n        this.constructor);\n      }\n    }\n  } // Getters and Traversers\n\n  getType() {\n    return this.__type;\n  }\n  isAttached() {\n    let nodeKey = this.__key;\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n      const node = $getNodeByKey(nodeKey);\n      if (node === null) {\n        break;\n      }\n      nodeKey = node.__parent;\n    }\n    return false;\n  }\n  isSelected() {\n    const selection = $getSelection();\n    if (selection == null) {\n      return false;\n    }\n    const isSelected = selection.getNodes().some(n => n.__key === this.__key);\n    if ($isTextNode(this)) {\n      return isSelected;\n    } // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n\n    if ($isRangeSelection(selection) && selection.anchor.type === 'element' && selection.focus.type === 'element' && selection.anchor.key === selection.focus.key && selection.anchor.offset === selection.focus.offset) {\n      return false;\n    }\n    return isSelected;\n  }\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n  getIndexWithinParent() {\n    const parent = this.getParent();\n    if (parent === null) {\n      return -1;\n    }\n    let node = parent.getFirstChild();\n    let index = 0;\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n      index++;\n      node = node.getNextSibling();\n    }\n    return -1;\n  }\n  getParent() {\n    const parent = this.getLatest().__parent;\n    if (parent === null) {\n      return null;\n    }\n    return $getNodeByKey(parent);\n  }\n  getParentOrThrow() {\n    const parent = this.getParent();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n    return parent;\n  }\n  getTopLevelElement() {\n    let node = this;\n    while (node !== null) {\n      const parent = node.getParent();\n      if ($isRootOrShadowRoot(parent)) {\n        return node;\n      }\n      node = parent;\n    }\n    return null;\n  }\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n    return parent;\n  }\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n    return parents;\n  }\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n    return parents;\n  }\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n    if (parent === null) {\n      return siblings;\n    }\n    let node = parent.getFirstChild();\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n    const aLength = a.length;\n    const bLength = b.length;\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n    const bSet = new Set(b);\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n    return null;\n  }\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n    return this.__key === object.__key;\n  }\n  isBefore(targetNode) {\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    node = targetNode;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    return indexA < indexB;\n  }\n  isParentOf(targetNode) {\n    const key = this.__key;\n    if (key === targetNode.__key) {\n      return false;\n    }\n    let node = targetNode;\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n      node = node.getParent();\n    }\n    return false;\n  } // TO-DO: this function can be simplified a lot\n\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n    while (true) {\n      const key = node.__key;\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n      if (node === targetNode) {\n        break;\n      }\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n      const parent = node.getParentOrThrow();\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n      if (parent === targetNode) {\n        break;\n      }\n      let parentSibling = null;\n      let ancestor = parent;\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        }\n      } while (parentSibling === null);\n      node = parentSibling;\n    }\n    if (!isBefore) {\n      nodes.reverse();\n    }\n    return nodes;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n    return latest;\n  }\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key; // Ensure we get the latest node from pending state\n\n    const latestNode = this.getLatest();\n    const parent = latestNode.__parent;\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n    if (selection !== null) {\n      selection._cachedNodes = null;\n    }\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n    const constructor = latestNode.constructor; // @ts-expect-error\n\n    const mutableNode = constructor.clone(latestNode);\n    mutableNode.__parent = parent;\n    mutableNode.__next = latestNode.__next;\n    mutableNode.__prev = latestNode.__prev;\n    if ($isElementNode(latestNode) && $isElementNode(mutableNode)) {\n      mutableNode.__first = latestNode.__first;\n      mutableNode.__last = latestNode.__last;\n      mutableNode.__size = latestNode.__size;\n      mutableNode.__indent = latestNode.__indent;\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__dir = latestNode.__dir;\n    } else if ($isTextNode(latestNode) && $isTextNode(mutableNode)) {\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__style = latestNode.__style;\n      mutableNode.__mode = latestNode.__mode;\n      mutableNode.__detail = latestNode.__detail;\n    }\n    cloneNotNeeded.add(key);\n    mutableNode.__key = key;\n    internalMarkNodeAsDirty(mutableNode); // Update reference in node map\n\n    nodeMap.set(key, mutableNode);\n    return mutableNode;\n  }\n  getTextContent() {\n    return '';\n  }\n  getTextContentSize() {\n    return this.getTextContent().length;\n  } // View\n\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n  /*\n   * This method is called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  } // Setters and mutators\n\n  remove(preserveEmptyParent) {\n    removeNode(this, true, preserveEmptyParent);\n  }\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) selection = selection.clone();\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    removeNode(self, false, true);\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n    writableReplaceWith.__prev = prevKey;\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n    if (includeChildren) {\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n    return writableReplaceWith;\n  }\n  insertAfter(nodeToInsert) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n    return nodeToInsert;\n  }\n  insertBefore(nodeToInsert) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev; // TODO: this is O(n), can we improve?\n\n    const index = this.getIndexWithinParent();\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n    return nodeToInsert;\n  }\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n    if (nextSibling === null) {\n      return parent.select();\n    }\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n    return nextSibling.select(anchorOffset, focusOffset);\n  } // Proxy to mark something as dirty\n\n  markDirty() {\n    this.getWritable();\n  }\n}\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type); // Common error - split in its own invariant\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n  const editorKlass = registeredNode.klass;\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\n\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n  isIsolated() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  isKeyboardSelectable() {\n    return true;\n  }\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__indent = 0;\n    this.__dir = null;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n      child = child.getNextSibling();\n    }\n    return textNodes;\n  }\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getFirstChild();\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      break;\n    }\n    return node;\n  }\n  getLastDescendant() {\n    let node = this.getLastChild();\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getLastChild();\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      break;\n    }\n    return node;\n  }\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length; // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n    return firstChild;\n  }\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n    return lastChild;\n  }\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n        node = node.getNextSibling();\n        i++;\n      }\n      return null;\n    }\n    node = this.getLastChild();\n    i = size - 1;\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n      node = node.getPreviousSibling();\n      i--;\n    }\n    return null;\n  }\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n    return textContent;\n  }\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n    return false;\n  } // Mutators\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n    const key = this.__key;\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n    return selection;\n  }\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n    if ($isElementNode(firstNode) || $isTextNode(firstNode)) {\n      return firstNode.select(0, 0);\n    } // Decorator or LineBreak\n\n    if (firstNode !== null) {\n      return firstNode.selectPrevious();\n    }\n    return this.select(0, 0);\n  }\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      return lastNode.select();\n    } // Decorator or LineBreak\n\n    if (lastNode !== null) {\n      return lastNode.selectNext();\n    }\n    return this.select();\n  }\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n  append() {\n    for (var _len2 = arguments.length, nodesToAppend = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      nodesToAppend[_key2] = arguments[_key2];\n    }\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n    let prevNode = nodeBeforeRange;\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n      const writableNodeToInsert = nodeToInsert.getWritable();\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      } // Set child parent to self\n\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n    writableSelf.__size = newSize; // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        } // Cleanup if node can't be empty\n\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n    return writableSelf;\n  } // JSON serialization\n\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  } // These are intended to be extends for specific element heuristics.\n\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n  canInsertTab() {\n    return false;\n  }\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n\n  collapseAtStart(selection) {\n    return false;\n  }\n  excludeFromCopy(destination) {\n    return false;\n  }\n  canExtractContents() {\n    return true;\n  }\n  canReplaceWith(replacement) {\n    return true;\n  }\n  canInsertAfter(node) {\n    return true;\n  }\n  canBeEmpty() {\n    return true;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  isInline() {\n    return false;\n  } // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n\n  isShadowRoot() {\n    return false;\n  }\n  canMergeWith(node) {\n    return false;\n  }\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n  while (node) {\n    const nodeKey = node.__key;\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n    node = node.getParent();\n  }\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n  static getType() {\n    return 'root';\n  }\n  static clone() {\n    return new RootNode();\n  }\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n  getTextContent() {\n    const cachedText = this.__cachedText;\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n    return super.getTextContent();\n  }\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  } // View\n\n  updateDOM(prevNode, dom) {\n    return false;\n  } // Mutate\n\n  append() {\n    for (let i = 0; i < arguments.length; i++) {\n      const node = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n    return super.append(...arguments);\n  }\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n  collapseAtStart() {\n    return true;\n  }\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n  const pendingSelection = editorState._selection; // Check if we need to update because of changes in selection\n\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor; // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .exportJSON().`);\n    }\n  } // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n  const serializedChildren = serializedNode.children;\n  if ($isElementNode(node)) {\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n    const children = node.getChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  } // @ts-expect-error\n\n  return serializedNode;\n}\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n  read(callbackFn) {\n    return readEditorState(this, callbackFn);\n  }\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n  toJSON() {\n    return readEditorState(this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  createDOM() {\n    return document.createElement('br');\n  }\n  updateDOM() {\n    return false;\n  }\n  static importDOM() {\n    return {\n      br: node => {\n        const parentElement = node.parentElement; // If the <br> is the only child, then skip including it\n\n        if (parentElement != null && parentElement.firstChild === node && parentElement.lastChild === node) {\n          return null;\n        }\n        return {\n          conversion: convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n}\nfunction convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n  return null;\n}\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n  return 'span';\n}\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList; // Firstly we handle the base theme.\n\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  } // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n          continue;\n        }\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing(); // Always add a suffix if we're composing a node\n\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        } // @ts-expect-error\n\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme; // Apply theme class names\n\n  const textClassNames = theme.text;\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n/** @noInheritDoc */\n\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  static getType() {\n    return 'text';\n  }\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  } // View\n\n  createDOM(config) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n    if (prevTag !== nextTag) {\n      return true;\n    }\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n    let innerDOM = dom;\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme; // Apply theme class names\n\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      br: () => ({\n        conversion: convertLineBreakToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  } // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor); // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n\n    if (element !== null) {\n      if (this.hasFormat('bold')) {\n        element = wrapElementWith(element, 'b');\n      }\n      if (this.hasFormat('italic')) {\n        element = wrapElementWith(element, 'i');\n      }\n      if (this.hasFormat('strikethrough')) {\n        element = wrapElementWith(element, 's');\n      }\n      if (this.hasFormat('underline')) {\n        element = wrapElementWith(element, 'u');\n      }\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  } // Mutators\n\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  } // TODO 0.5 This should just be a `string`.\n\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  } // TODO 0.5 This should just be a `string`.\n\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n  toggleFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return this.setFormat(this.getFormat() ^ formatFlag);\n  }\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n    if (this.__mode === mode) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n    return selection;\n  }\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n    if (index < 0) {\n      index = handledTextLength + index;\n      if (index < 0) {\n        index = 0;\n      }\n    }\n    const selection = $getSelection();\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  splitText() {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    for (var _len3 = arguments.length, splitOffsets = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      splitOffsets[_key3] = arguments[_key3];\n    }\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n      string += textContent[i];\n    }\n    if (string !== '') {\n      parts.push(string);\n    }\n    const partsLength = parts.length;\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n    const firstPart = parts[0];\n    const parent = self.getParentOrThrow();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    } // Handle selection\n\n    const selection = $getSelection(); // Then handle all other parts\n\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    } // Insert the nodes into the parent's children\n\n    internalMarkSiblingsAsDirty(this);\n    const writableParent = parent.getWritable();\n    const insertionIndex = this.getIndexWithinParent();\n    if (hasReplacedSelf) {\n      writableParent.splice(insertionIndex, 0, splitNodes);\n      this.remove();\n    } else {\n      writableParent.splice(insertionIndex, 1, splitNodes);\n    }\n    if ($isRangeSelection(selection)) {\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n    }\n    return splitNodes;\n  }\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n  isTextEntity() {\n    return false;\n  }\n}\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode; // Google Docs uses span tags + font-weight for bold text\n\n  const hasBoldFontWeight = span.style.fontWeight === '700'; // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n\n  const hasLinethroughTextDecoration = span.style.textDecoration === 'line-through'; // Google Docs uses span tags + font-style for italic text\n\n  const hasItalicFontStyle = span.style.fontStyle === 'italic'; // Google Docs uses span tags + text-decoration: underline for underline text\n\n  const hasUnderlineTextDecoration = span.style.textDecoration === 'underline'; // Google Docs uses span tags + vertical-align to specify subscript and superscript\n\n  const verticalAlign = span.style.verticalAlign;\n  return {\n    forChild: lexicalNode => {\n      if (!$isTextNode(lexicalNode)) {\n        return lexicalNode;\n      }\n      if (hasBoldFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n      if (hasLinethroughTextDecoration) {\n        lexicalNode.toggleFormat('strikethrough');\n      }\n      if (hasItalicFontStyle) {\n        lexicalNode.toggleFormat('italic');\n      }\n      if (hasUnderlineTextDecoration) {\n        lexicalNode.toggleFormat('underline');\n      }\n      if (verticalAlign === 'sub') {\n        lexicalNode.toggleFormat('subscript');\n      }\n      if (verticalAlign === 'super') {\n        lexicalNode.toggleFormat('superscript');\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction convertLineBreakToElement() {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode; // Google Docs wraps all copied HTML in a <b> with font-weight normal\n\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !hasNormalFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction convertTextDOMNode(domNode, _parent, preformatted) {\n  let textContent = domNode.textContent || '';\n  if (!preformatted && /\\n/.test(textContent)) {\n    textContent = textContent.replace(/\\r?\\n/gm, ' ');\n    if (textContent.trim().length === 0) {\n      return {\n        node: null\n      };\n    }\n  }\n  return {\n    node: $createTextNode(textContent)\n  };\n}\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !lexicalNode.hasFormat(format)) {\n        lexicalNode.toggleFormat(format);\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction $createTextNode() {\n  let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  static getType() {\n    return 'paragraph';\n  }\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  } // View\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && this.isEmpty()) {\n      element.append(document.createElement('br'));\n    }\n    if (element) {\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n      const indent = this.getIndent();\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'paragraph',\n      version: 1\n    };\n  } // Mutation\n\n  insertNewAfter(_, restoreSelection) {\n    const newElement = $createParagraphNode();\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const children = this.getChildren(); // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n      const prevSibling = this.getPreviousSibling();\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction convertParagraphElement() {\n  return {\n    node: $createParagraphNode()\n  };\n}\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n  editor._cloneNotNeeded.clear();\n  editor._dirtyLeaves = new Set();\n  editor._dirtyElements.clear();\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  } // Remove all the DOM nodes from the root element\n\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\nfunction initializeConversionCache(nodes) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM != null ? node.klass.importDOM.bind(node.klass) : null;\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n    handledConversions.add(importDOM);\n    const map = importDOM();\n    if (map !== null) {\n      Object.keys(map).forEach(key => {\n        let currentCache = conversionCache.get(key);\n        if (currentCache === undefined) {\n          currentCache = [];\n          conversionCache.set(key, currentCache);\n        }\n        currentCache.push(map[key]);\n      });\n    }\n  });\n  return conversionCache;\n}\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, ParagraphNode, ...(config.nodes || [])];\n  const onError = config.onError;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replacementClass = null;\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replacementClass = options.with;\n      } // Ensure custom nodes implement required methods.\n\n      {\n        const name = klass.name;\n        if (name !== 'RootNode') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') &&\n          // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n      const type = klass.getType();\n      registeredNodes.set(type, {\n        klass,\n        replace: replacementClass,\n        transforms: new Set()\n      });\n    }\n  }\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes), isEditable);\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n  return editor;\n}\nclass LexicalEditor {\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor; // The root element associated with this editor\n\n    this._rootElement = null; // The current editor state\n\n    this._editorState = editorState; // Handling of drafts and updates\n\n    this._pendingEditorState = null; // Used to help co-ordinate selection and events\n\n    this._compositionKey = null;\n    this._deferred = []; // Used during reconciliation\n\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false; // Listeners\n\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    }; // Commands\n\n    this._commands = new Map(); // Editor configuration for theme/context.\n\n    this._config = config; // Mapping of types to their nodes\n\n    this._nodes = nodes; // React node decorators for portals\n\n    this._decorators = {};\n    this._pendingDecorators = null; // Used to optimize reconciliation\n\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set(); // Handling of DOM mutations\n\n    this._observer = null; // Used for identifying owning editors\n\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions; // We don't actually make use of the `editable` argument above.\n    // Doing so, causes e2e tests around the lock to fail.\n\n    this._editable = true;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n    const commandsMap = this._commands;\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n    const listenersInPriorityOrder = commandsMap.get(command);\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n  registerMutationListener(klass, listener) {\n    const registeredNode = this._nodes.get(klass.getType());\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klass);\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n  registerNodeTransform(klass, listener) {\n    const type = klass.getType();\n    const registeredNode = this._nodes.get(type);\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const transforms = registeredNode.transforms;\n    transforms.add(listener);\n    markAllNodesAsDirty(this, type);\n    return () => {\n      transforms.delete(listener);\n    };\n  }\n  hasNodes(nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      const klass = nodes[i];\n      const type = klass.getType();\n      if (!this._nodes.has(type)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n  getDecorators() {\n    return this._decorators;\n  }\n  getRootElement() {\n    return this._rootElement;\n  }\n  getKey() {\n    return this._key;\n  }\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n        this._updateTags.add('history-merge');\n        commitPendingUpdates(this); // TODO: remove this flag once we no longer use UEv2 internally\n\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        this._window = null;\n      }\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n  getEditorState() {\n    return this._editorState;\n  }\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n    flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n      commitPendingUpdates(this);\n    }\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n    this._dirtyElements.set('root', false);\n    this._compositionKey = null;\n    if (tag != null) {\n      tags.add(tag);\n    }\n    commitPendingUpdates(this);\n  }\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n  focus(callbackFn) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n          if (callbackFn) {\n            callbackFn();\n          }\n        }\n      }); // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n  blur() {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n    const domSelection = getDOMSelection(this._window);\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  isEditable() {\n    return this._editable;\n  }\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass DEPRECATED_GridCellNode extends ElementNode {\n  /** @internal */\n  constructor(colSpan, key) {\n    super(key);\n    this.__colSpan = colSpan;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      colSpan: this.__colSpan\n    };\n  }\n}\nfunction DEPRECATED_$isGridCellNode(node) {\n  return node instanceof DEPRECATED_GridCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass DEPRECATED_GridNode extends ElementNode {}\nfunction DEPRECATED_$isGridNode(node) {\n  return node instanceof DEPRECATED_GridNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass DEPRECATED_GridRowNode extends ElementNode {}\nfunction DEPRECATED_$isGridRowNode(node) {\n  return node instanceof DEPRECATED_GridRowNode;\n}\nexports.$addUpdateTag = $addUpdateTag;\nexports.$applyNodeReplacement = $applyNodeReplacement;\nexports.$copyNode = $copyNode;\nexports.$createLineBreakNode = $createLineBreakNode;\nexports.$createNodeSelection = $createNodeSelection;\nexports.$createParagraphNode = $createParagraphNode;\nexports.$createRangeSelection = $createRangeSelection;\nexports.$createTextNode = $createTextNode;\nexports.$getAdjacentNode = $getAdjacentNode;\nexports.$getNearestNodeFromDOMNode = $getNearestNodeFromDOMNode;\nexports.$getNearestRootOrShadowRoot = $getNearestRootOrShadowRoot;\nexports.$getNodeByKey = $getNodeByKey;\nexports.$getPreviousSelection = $getPreviousSelection;\nexports.$getRoot = $getRoot;\nexports.$getSelection = $getSelection;\nexports.$getTextContent = $getTextContent;\nexports.$hasAncestor = $hasAncestor;\nexports.$insertNodes = $insertNodes;\nexports.$isDecoratorNode = $isDecoratorNode;\nexports.$isElementNode = $isElementNode;\nexports.$isInlineElementOrDecoratorNode = $isInlineElementOrDecoratorNode;\nexports.$isLeafNode = $isLeafNode;\nexports.$isLineBreakNode = $isLineBreakNode;\nexports.$isNodeSelection = $isNodeSelection;\nexports.$isParagraphNode = $isParagraphNode;\nexports.$isRangeSelection = $isRangeSelection;\nexports.$isRootNode = $isRootNode;\nexports.$isRootOrShadowRoot = $isRootOrShadowRoot;\nexports.$isTextNode = $isTextNode;\nexports.$nodesOfType = $nodesOfType;\nexports.$normalizeSelection__EXPERIMENTAL = $normalizeSelection;\nexports.$parseSerializedNode = $parseSerializedNode;\nexports.$setCompositionKey = $setCompositionKey;\nexports.$setSelection = $setSelection;\nexports.BLUR_COMMAND = BLUR_COMMAND;\nexports.CAN_REDO_COMMAND = CAN_REDO_COMMAND;\nexports.CAN_UNDO_COMMAND = CAN_UNDO_COMMAND;\nexports.CLEAR_EDITOR_COMMAND = CLEAR_EDITOR_COMMAND;\nexports.CLEAR_HISTORY_COMMAND = CLEAR_HISTORY_COMMAND;\nexports.CLICK_COMMAND = CLICK_COMMAND;\nexports.COMMAND_PRIORITY_CRITICAL = COMMAND_PRIORITY_CRITICAL;\nexports.COMMAND_PRIORITY_EDITOR = COMMAND_PRIORITY_EDITOR;\nexports.COMMAND_PRIORITY_HIGH = COMMAND_PRIORITY_HIGH;\nexports.COMMAND_PRIORITY_LOW = COMMAND_PRIORITY_LOW;\nexports.COMMAND_PRIORITY_NORMAL = COMMAND_PRIORITY_NORMAL;\nexports.CONTROLLED_TEXT_INSERTION_COMMAND = CONTROLLED_TEXT_INSERTION_COMMAND;\nexports.COPY_COMMAND = COPY_COMMAND;\nexports.CUT_COMMAND = CUT_COMMAND;\nexports.DELETE_CHARACTER_COMMAND = DELETE_CHARACTER_COMMAND;\nexports.DELETE_LINE_COMMAND = DELETE_LINE_COMMAND;\nexports.DELETE_WORD_COMMAND = DELETE_WORD_COMMAND;\nexports.DEPRECATED_$createGridSelection = DEPRECATED_$createGridSelection;\nexports.DEPRECATED_$isGridCellNode = DEPRECATED_$isGridCellNode;\nexports.DEPRECATED_$isGridNode = DEPRECATED_$isGridNode;\nexports.DEPRECATED_$isGridRowNode = DEPRECATED_$isGridRowNode;\nexports.DEPRECATED_$isGridSelection = DEPRECATED_$isGridSelection;\nexports.DEPRECATED_GridCellNode = DEPRECATED_GridCellNode;\nexports.DEPRECATED_GridNode = DEPRECATED_GridNode;\nexports.DEPRECATED_GridRowNode = DEPRECATED_GridRowNode;\nexports.DRAGEND_COMMAND = DRAGEND_COMMAND;\nexports.DRAGOVER_COMMAND = DRAGOVER_COMMAND;\nexports.DRAGSTART_COMMAND = DRAGSTART_COMMAND;\nexports.DROP_COMMAND = DROP_COMMAND;\nexports.DecoratorNode = DecoratorNode;\nexports.ElementNode = ElementNode;\nexports.FOCUS_COMMAND = FOCUS_COMMAND;\nexports.FORMAT_ELEMENT_COMMAND = FORMAT_ELEMENT_COMMAND;\nexports.FORMAT_TEXT_COMMAND = FORMAT_TEXT_COMMAND;\nexports.INDENT_CONTENT_COMMAND = INDENT_CONTENT_COMMAND;\nexports.INSERT_LINE_BREAK_COMMAND = INSERT_LINE_BREAK_COMMAND;\nexports.INSERT_PARAGRAPH_COMMAND = INSERT_PARAGRAPH_COMMAND;\nexports.KEY_ARROW_DOWN_COMMAND = KEY_ARROW_DOWN_COMMAND;\nexports.KEY_ARROW_LEFT_COMMAND = KEY_ARROW_LEFT_COMMAND;\nexports.KEY_ARROW_RIGHT_COMMAND = KEY_ARROW_RIGHT_COMMAND;\nexports.KEY_ARROW_UP_COMMAND = KEY_ARROW_UP_COMMAND;\nexports.KEY_BACKSPACE_COMMAND = KEY_BACKSPACE_COMMAND;\nexports.KEY_DELETE_COMMAND = KEY_DELETE_COMMAND;\nexports.KEY_ENTER_COMMAND = KEY_ENTER_COMMAND;\nexports.KEY_ESCAPE_COMMAND = KEY_ESCAPE_COMMAND;\nexports.KEY_MODIFIER_COMMAND = KEY_MODIFIER_COMMAND;\nexports.KEY_SPACE_COMMAND = KEY_SPACE_COMMAND;\nexports.KEY_TAB_COMMAND = KEY_TAB_COMMAND;\nexports.LineBreakNode = LineBreakNode;\nexports.MOVE_TO_END = MOVE_TO_END;\nexports.MOVE_TO_START = MOVE_TO_START;\nexports.OUTDENT_CONTENT_COMMAND = OUTDENT_CONTENT_COMMAND;\nexports.PASTE_COMMAND = PASTE_COMMAND;\nexports.ParagraphNode = ParagraphNode;\nexports.REDO_COMMAND = REDO_COMMAND;\nexports.REMOVE_TEXT_COMMAND = REMOVE_TEXT_COMMAND;\nexports.RootNode = RootNode;\nexports.SELECTION_CHANGE_COMMAND = SELECTION_CHANGE_COMMAND;\nexports.TextNode = TextNode;\nexports.UNDO_COMMAND = UNDO_COMMAND;\nexports.createCommand = createCommand;\nexports.createEditor = createEditor;","map":{"version":3,"names":["createCommand","type","SELECTION_CHANGE_COMMAND","CLICK_COMMAND","DELETE_CHARACTER_COMMAND","INSERT_LINE_BREAK_COMMAND","INSERT_PARAGRAPH_COMMAND","CONTROLLED_TEXT_INSERTION_COMMAND","PASTE_COMMAND","REMOVE_TEXT_COMMAND","DELETE_WORD_COMMAND","DELETE_LINE_COMMAND","FORMAT_TEXT_COMMAND","UNDO_COMMAND","REDO_COMMAND","KEY_ARROW_RIGHT_COMMAND","MOVE_TO_END","KEY_ARROW_LEFT_COMMAND","MOVE_TO_START","KEY_ARROW_UP_COMMAND","KEY_ARROW_DOWN_COMMAND","KEY_ENTER_COMMAND","KEY_SPACE_COMMAND","KEY_BACKSPACE_COMMAND","KEY_ESCAPE_COMMAND","KEY_DELETE_COMMAND","KEY_TAB_COMMAND","INDENT_CONTENT_COMMAND","OUTDENT_CONTENT_COMMAND","DROP_COMMAND","FORMAT_ELEMENT_COMMAND","DRAGSTART_COMMAND","DRAGOVER_COMMAND","DRAGEND_COMMAND","COPY_COMMAND","CUT_COMMAND","CLEAR_EDITOR_COMMAND","CLEAR_HISTORY_COMMAND","CAN_REDO_COMMAND","CAN_UNDO_COMMAND","FOCUS_COMMAND","BLUR_COMMAND","KEY_MODIFIER_COMMAND","CAN_USE_DOM","window","document","createElement","documentMode","IS_APPLE","test","navigator","platform","IS_FIREFOX","userAgent","CAN_USE_BEFORE_INPUT","InputEvent","IS_SAFARI","IS_IOS","MSStream","IS_CHROME","DOM_ELEMENT_TYPE","DOM_TEXT_TYPE","NO_DIRTY_NODES","HAS_DIRTY_NODES","FULL_RECONCILE","IS_NORMAL","IS_TOKEN","IS_SEGMENTED","IS_BOLD","IS_ITALIC","IS_STRIKETHROUGH","IS_UNDERLINE","IS_CODE","IS_SUBSCRIPT","IS_SUPERSCRIPT","IS_ALL_FORMATTING","IS_DIRECTIONLESS","IS_UNMERGEABLE","IS_ALIGN_LEFT","IS_ALIGN_CENTER","IS_ALIGN_RIGHT","IS_ALIGN_JUSTIFY","IS_ALIGN_START","IS_ALIGN_END","NON_BREAKING_SPACE","ZERO_WIDTH_SPACE","COMPOSITION_SUFFIX","DOUBLE_LINE_BREAK","COMPOSITION_START_CHAR","RTL","LTR","RTL_REGEX","RegExp","LTR_REGEX","TEXT_TYPE_TO_FORMAT","bold","code","italic","strikethrough","subscript","superscript","underline","DETAIL_TYPE_TO_DETAIL","directionless","unmergeable","ELEMENT_TYPE_TO_FORMAT","center","end","justify","left","right","start","ELEMENT_FORMAT_TO_TYPE","TEXT_MODE_TO_TYPE","normal","segmented","token","TEXT_TYPE_TO_MODE","TEXT_MUTATION_VARIANCE","isProcessingMutations","lastTextEntryTimeStamp","getIsProcesssingMutations","updateTimeStamp","event","timeStamp","initTextEntryListener","editor","getWindow","addEventListener","isManagedLineBreak","dom","target","__lexicalLineBreak","_key","undefined","getLastSelection","getEditorState","read","selection","$getSelection","clone","handleTextMutation","node","domSelection","getDOMSelection","_window","anchorOffset","focusOffset","anchorNode","text","nodeValue","$updateTextNodeFromDOMContent","shouldUpdateTextNodeFromMutation","targetDOM","targetNode","$isRangeSelection","anchor","getNode","is","format","getFormat","nodeType","isAttached","$flushMutations$1","mutations","observer","shouldFlushTextMutations","performance","now","updateEditor","badDOMTargets","Map","rootElement","getRootElement","currentEditorState","_editorState","blockCursorElement","_blockCursorElement","shouldRevertSelection","possibleTextForFirefoxPaste","i","length","mutation","$getNearestNodeFromDOMNode","$isDecoratorNode","$isTextNode","addedDOMs","addedNodes","s","addedDOM","getNodeFromDOMNode","parentDOM","parentNode","nodeName","possibleText","innerText","removeChild","removedDOMs","removedNodes","removedDOMsLength","unremovedBRs","removedDOM","appendChild","internalGetRoot","set","size","$isElementNode","childKeys","getChildrenKeys","currentDOM","firstChild","key","correctDOM","getElementByKey","replaceChild","nextSibling","markDirty","records","takeRecords","record","dirty","$setSelection","isFirefoxClipboardEvents","insertRawText","flushRootMutations","_observer","initMutationObserver","MutationObserver","keyCounter","generateRandomKey","getRegisteredNodeOrThrow","registeredNode","_nodes","get","Error","scheduleMicroTask","queueMicrotask","fn","Promise","resolve","then","$isSelectionCapturedInDecorator","isSelectionCapturedInDecoratorInput","anchorDOM","activeElement","contentEditable","__lexicalEditor","isSelectionWithinEditor","focusDOM","contains","getNearestEditorFromDOMNode","error","currentNode","getParentElement","getTextDirection","$isTokenOrSegmented","isToken","isSegmented","isDOMNodeLexicalTextNode","getDOMTextNode","element","toggleTextFormatType","alignWithFormat","activeFormat","isStateFlagPresent","$isLeafNode","$isLineBreakNode","$setNodeKey","existingKey","__key","errorOnReadOnly","errorOnInfiniteTransforms","getActiveEditor","editorState","getActiveEditorState","_nodeMap","_dirtyElements","_dirtyLeaves","add","_cloneNotNeeded","_dirtyType","internalMarkParentElementsAsDirty","parentKey","nodeMap","dirtyElements","nextParentKey","has","__parent","removeFromParent","oldParent","getParent","writableNode","getWritable","writableParent","prevSibling","getPreviousSibling","getNextSibling","writableNextSibling","__first","__prev","writablePrevSibling","__next","__last","__size","internalMarkNodeAsDirty","latest","getLatest","parent","internalMarkSiblingsAsDirty","previousNode","nextNode","$setCompositionKey","compositionKey","previousCompositionKey","_compositionKey","$getNodeByKey","$getCompositionKey","isCurrentlyReadOnlyMode","startingDOM","cloneDecorators","currentDecorators","_decorators","pendingDecorators","Object","assign","_pendingDecorators","getEditorStateTextContent","$getRoot","getTextContent","markAllNodesAsDirty","isEmpty","_pendingEditorState","tag","isFrozen","_cachedNodes","_selection","$flushMutations","getNodeFromDOM","nodeKey","getNodeKeyFromDOM","getTextNodeOffset","moveSelectionToEnd","getTextContentSize","doesContainGrapheme","str","getEditorsToPropagate","editorsToPropagate","currentEditor","push","_parentEditor","createUID","Math","random","toString","replace","substr","getAnchorTextFromDOM","$updateSelectedTextFromDOM","isCompositionEnd","data","textContent","offset","textNode","compositionEnd","isDirty","isComposing","normalizedTextContent","slice","prevTextContent","setTimeout","update","remove","prevSelection","$getPreviousSelection","getKey","canInsertTextBefore","setTextContent","setTextNodeRange","originalTextContent","replacement","$createTextNode","$previousSiblingDoesNotAcceptText","previousSibling","isInline","canInsertTextAfter","$shouldInsertTextAfterOrBeforeTextNode","isCollapsed","getParentOrThrow","isTab","keyCode","altKey","ctrlKey","metaKey","isBold","controlOrMeta","isItalic","isUnderline","isParagraph","shiftKey","isReturn","isLineBreak","isOpenLineBreak","isDeleteWordBackward","isBackspace","isDeleteWordForward","isDelete","isDeleteLineBackward","isDeleteLineForward","isDeleteBackward","isDeleteForward","isUndo","isRedo","isCopy","isCut","isArrowLeft","isArrowRight","isArrowUp","isArrowDown","isMoveBackward","isMoveToStart","isMoveForward","isMoveToEnd","isMoveUp","isMoveDown","isModifier","isSpace","isEscape","getCachedClassNameArray","classNamesTheme","classNameThemeType","classNames","classNamesArr","split","setMutatedNode","mutatedNodes","registeredNodes","mutationListeners","__type","klass","mutatedNodesByType","prevMutation","isMove","$nodesOfType","readOnly","_readOnly","klassType","getType","nodes","nodesOfType","resolveElement","isBackward","block","getIndexWithinParent","getChildrenSize","getChildAtIndex","$getAdjacentNode","focus","focusNode","possibleNode","inputType","dispatchCommand","command","payload","triggerCommandListeners","$textContentRequiresDoubleLinebreakAtEnd","$isRootNode","isLastChild","getElementByKeyOrThrow","_keyToDOMMap","parentElement","assignedSlot","host","scrollIntoViewIfNeeded","selectionRect","doc","ownerDocument","defaultView","top","currentTop","bottom","currentBottom","targetTop","targetBottom","isBodyElement","body","innerHeight","targetRect","getBoundingClientRect","diff","scrollBy","scrollTop","yOffset","$addUpdateTag","_updateTags","$maybeMoveChildrenSelectionToParent","$hasAncestor","child","getDefaultView","domElem","ownerDoc","windowObj","$isInlineElementOrDecoratorNode","$getNearestRootOrShadowRoot","$isRootOrShadowRoot","isShadowRoot","$copyNode","copy","constructor","$applyNodeReplacement","replaceFunc","replacementNode","errorOnInsertTextNodeOnRoot","insertNode","createBlockCursorElement","editorConfig","theme","setAttribute","blockCursorTheme","blockCursor","classList","needsBlockCursor","canBeEmpty","removeDOMBlockCursorElement","style","removeProperty","updateDOMBlockCursorElement","nextSelection","elementNode","elementNodeSize","isBlockCursor","insertBeforeElement","sibling","elementDOM","_config","caretColor","insertBefore","targetWindow","getSelection","$garbageCollectDetachedDecorators","pendingEditorState","decorators","$garbageCollectDetachedDeepChildNodes","prevNodeMap","dirtyNodes","getFirstChild","childKey","delete","$garbageCollectDetachedNodes","prevEditorState","dirtyLeaves","$canSimpleTextNodesBeMerged","node1","node2","node1Mode","__mode","node1Format","__format","node1Style","__style","node2Mode","node2Format","node2Style","$mergeTextNodes","writableNode1","mergeWithSibling","normalizedNodes","_normalizedNodes","$normalizeTextNode","__text","isSimpleText","isUnmergeable","$normalizeSelection","$normalizePoint","point","nextOffsetAtEnd","subTreeTextContent","subTreeDirectionedTextContent","editorTextContent","activeEditorConfig","activeEditor$1","activeEditorNodes","treatAllNodesAsDirty","activeEditorStateReadOnly","activeMutationListeners","activeTextDirection","activeDirtyElements","activeDirtyLeaves","activePrevNodeMap","activeNextNodeMap","activePrevKeyToDOMMap","destroyNode","getPrevElementByKeyOrThrow","children","createChildrenArray","destroyChildren","_startIndex","endIndex","startIndex","setTextAlign","domStyle","value","setProperty","setElementIndent","indent","setElementFormat","createNode","insertDOM","createDOM","storeDOMWithKey","__indent","childrenSize","createChildrenWithDirection","__lexicalTextContent","reconcileElementTerminatingLineBreak","decorator","decorate","reconcileDecorator","isDirectionless","possibleLineBreak","freeze","previousSubTreeDirectionedTextContent","createChildren","reconcileBlockDirection","previousSubTreeTextContent","isLastChildLineBreakOrDecorator","prevElement","nextElement","prevLineBreak","nextLineBreak","previousSubTreeDirectionTextContent","__lexicalDirTextContent","previousDirection","__lexicalDir","hasEmptyDirectionedTextContent","direction","previousDirectionTheme","nextDirectionTheme","removeAttribute","dir","__dir","reconcileChildrenWithDirection","reconcileChildren","prevChildrenSize","nextChildrenSize","prevFirstChildKey","nextFrstChildKey","reconcileNode","lastDOM","replacementDOM","prevChildren","nextChildren","lexicalLineBreak","canUseFastPath","reconcileNodeChildren","prevNode","updateDOM","nextIndent","nextFormat","__cachedText","prevChildrenLength","nextChildrenLength","prevEndIndex","nextEndIndex","prevChildrenSet","nextChildrenSet","siblingDOM","prevIndex","nextIndex","prevKey","nextKey","Set","nextHasPrevKey","prevHasNextKey","childDOM","appendNewChildren","removeOldChildren","reconcileRoot","nextEditorState","dirtyType","_listeners","currentMutatedNodes","keyToDOMMap","PASS_THROUGH_COMMAND","ANDROID_COMPOSITION_LATENCY","rootElementEvents","onKeyDown","onPointerDown","onCompositionStart","onCompositionEnd","onInput","onClick","onBeforeInput","lastKeyDownTimeStamp","lastKeyCode","lastBeforeInputInsertTextTimeStamp","rootElementsRegistered","isSelectionChangeFromDOMUpdate","isSelectionChangeFromMouseDown","isInsertLineBreak","isFirefoxEndingComposition","collapsedSelectionFormat","$shouldPreventDefaultAndInsertText","isBeforeInput","domAnchorNode","anchorKey","backingAnchorElement","textLength","shouldSkipSelectionChange","domNode","onSelectionChange","isActive","windowEvent","currentTimeStamp","lastFormat","lastOffset","lastKey","combinedFormat","hasTextNodes","getNodes","nodesLength","lastSelection","getTopLevelElementOrThrow","removeAllRanges","pointerType","Node","$applyTargetRange","getTargetRanges","targetRange","applyDOMRange","$canRemoveText","isPossiblyAndroidKeyPress","preventDefault","dataTransfer","getData","stopPropagation","onCompositionEndImpl","$isNodeSelection","getRootElementRemoveHandles","eventHandles","__lexicalEventHandles","activeNestedEditorsMap","onDocumentSelectionChange","nextActiveEditor","newSelection","internalCreateRangeSelection","editors","rootEditor","rootEditorKey","activeNestedEditor","prevActiveEditor","stopLexicalPropagation","_lexicalHandled","hasStoppedLexicalPropagation","stopped","addRootElementEvents","removeHandles","eventName","onEvent","eventHandler","isEditable","removeEventListener","removeRootElementEvents","cleanActiveNestedEditorsMap","markSelectionChangeFromDOMUpdate","markCollapsedSelectionFormat","Point","isBefore","b","aNode","bNode","aOffset","bOffset","aNodeDescendant","getDescendantByIndex","bNodeDescendant","oldKey","$createPoint","selectPointOnNode","textContentLength","$moveSelectionPointToEnd","lastNode","getLastDescendant","$transferStartingElementPointToTextPoint","placementNode","$createParagraphNode","append","setFormat","$setPointValues","NodeSelection","objects","a","Array","from","every","clear","extract","insertText","insertNodes","selectStart","selectedNodes","selectedNodesLength","lastSelectedNode","selectionAtEnd","select","index","cachedNodes","object","x","RangeSelection","GridSelection","gridKey","DEPRECATED_$isGridSelection","anchorCellKey","focusCellKey","getCharacterOffsets","getShape","anchorCellNode","anchorCellNodeIndex","anchorCelRoweIndex","focusCellNode","focusCellNodeIndex","focusCellRowIndex","startX","min","stopX","max","startY","stopY","fromX","fromY","toX","toY","nodesSet","gridNode","DEPRECATED_$isGridNode","gridRowNodes","getChildren","r","gridRowNode","DEPRECATED_$isGridRowNode","gridCellNodes","c","gridCellNode","DEPRECATED_$isGridCellNode","shift","unshift","firstNode","firstNodeDescendant","lastNodeDescendant","getNodesBetween","prevWasElement","range","resolvedSelectionPoints","internalResolveSelectionPoints","startContainer","startOffset","endContainer","endOffset","anchorPoint","focusPoint","toggleFormat","hasFormat","formatFlag","parts","part","$createLineBreakNode","firstPoint","endPoint","firstNodeText","firstNodeTextLength","firstNodeParent","lastIndex","insertAfter","lastNodeParent","normalizeSelectionPointsForBoundaries","firstNodeFormat","splitText","delCount","spliceText","markedNodeKeysForKeep","getParentKeys","firstElement","lastElement","lastElementChild","lastNodeChildren","selectedNodesSet","firstAndLastElementsAreEqual","insertionTarget","lastNodeChild","isParentOf","lastRemovedParent","childrenLength","selectedNode","removeText","formatText","formatType","selectedTextNodes","selectedTextNodesLength","startPoint","firstIndex","firstNextFormat","getFormatFlags","splitNodes","lastNextFormat","selectionEnd","nextSiblingKey","prevSiblingKey","siblings","nextSiblings","getNextSiblings","topLevelElement","danglingText","startingNode","didReplaceOrMerge","canReplaceWith","firstDescendant","getFirstDescendant","nextTarget","lastChild","selectPrevious","selectNext","originalTarget","prevParent","$isBlockElementNode","isIsolated","canInsertAfter","prevParentClone","insertParagraph","currentElement","nodesToMove","siblingsToMove","reverse","splitNode","paragraph","nodesToMoveLength","newElement","insertNewAfter","insertLineBreak","currentElementFirstChild","isBeginning","siblingsToMoveLength","siblingToMove","nodeToMove","lineBreakNode","lastNodeText","lastNodeTextLength","pop","modify","alter","granularity","collapse","isKeyboardSelectable","nodeSelection","$createNodeSelection","elementKey","siblingKey","_rootElement","moveNativeSelection","rangeCount","getRangeAt","root","validNodes","shrinkSelection","firstValidNode","lastValidNode","selectEnd","$swapPoints","deleteCharacter","canExtractContents","textContentSize","$removeSegment","$updateCaretSelectionForUnicodeCharacter","collapseAtStart","deleteLine","deleteWord","getCharacterOffset","anchorType","characterOffset","splitLength","segmentOffset","restoreOffset","isLast","splice","nextTextContent","join","trim","shouldResolveAncestor","resolvedElement","resolvedOffset","lastPoint","internalResolveSelectionPoint","resolvedNode","childNodes","childNodesLength","hasBlockCursor","descendant","resolveSelectionPointOnBoundary","parentSibling","lastAnchor","lastFocus","resolvedAnchorPoint","resolvedFocusPoint","internalMakeRangeSelection","focusKey","focusType","$createRangeSelection","DEPRECATED_$createGridSelection","internalCreateSelection","eventType","isSelectionChange","useDOMSelection","detail","$updateElementSelectionOnCreateDeleteNode","nodeOffset","times","selectionOffset","newSelectionOffset","$updateSelectionResolveTextNodes","firstPointNode","lastPointNode","firstPointOffset","lastPointOffset","childSize","anchorOffsetAtEnd","newOffset","focusOffsetAtEnd","applySelectionTransforms","selectionTransform","moveSelectionPointToSibling","adjustPointOffsetForMergedSibling","updateDOMSelection","tags","nodeCount","anchorDOMNode","focusDOMNode","nextAnchorOffset","nextFocusOffset","nextAnchorNode","nextFocusNode","anchorFormatChanged","preventScroll","requestAnimationFrame","setBaseAndExtent","selectionTarget","$insertNodes","$getTextContent","activeEditorState","activeEditor","isReadOnlyMode","isAttemptingToRecoverFromReconcilerError","infiniteTransformCount","observerOptions","characterData","childList","subtree","internalGetActiveEditor","$applyTransforms","transformsCache","transformsArr","transforms","transformsArrLength","$isNodeValidForTransform","$normalizeAllDirtyTextNodes","$applyAllTransforms","untransformedDirtyLeaves","untransformedDirtyLeavesLength","untransformedDirtyElements","untransformedDirtyElementsLength","currentUntransformedDirtyElement","intentionallyMarkedAsDirty","$parseSerializedNode","serializedNode","internalSerializedNode","$parseSerializedNodeImpl","nodeClass","name","importJSON","isArray","serializedJSONChildNode","childNode","parseEditorState","serializedEditorState","updateFn","createEmptyEditorState","previousActiveEditorState","previousReadOnlyMode","previousActiveEditor","previousDirtyElements","previousDirtyLeaves","previousCloneNotNeeded","previousDirtyType","handleDEVOnlyPendingUpdateGuarantees","readEditorState","callbackFn","commitPendingUpdates","shouldSkipDOM","_headless","currentSelection","pendingSelection","needsUpdate","previouslyUpdating","_updating","disconnect","_onError","resetEditor","observe","deferred","_deferred","_editable","triggerMutationListeners","triggerListeners","triggerTextContentListeners","triggerDeferredUpdateCallbacks","triggerEnqueuedUpdates","currentTextContent","latestTextContent","updateTags","listeners","listenersLength","listener","isCurrentlyEnqueuingUpdates","apply","returnVal","e","commandListeners","_commands","listenerInPriorityOrder","listenersSet","j","queuedUpdates","_updates","queuedUpdate","options","beginUpdate","processNestedUpdates","initialSkipTransforms","skipTransforms","nextUpdateFn","onUpdate","discrete","editorStateWasCloned","cloneEditorState","_flushSync","startingCompositionKey","endingCompositionKey","pendingNodeMap","shouldUpdate","editorStateHasDirtySelection","removeNode","nodeToRemove","restoreSelection","preserveEmptyParent","selectionMoved","LexicalNode","_data","errorOnTypeKlassMismatch","isSelected","some","n","getTopLevelElement","getParents","parents","self","getPreviousSiblings","getCommonAncestor","aLength","bLength","bSet","ancestor","commonAncestor","indexA","indexB","visited","getLastChild","latestNode","cloneNotNeeded","mutableNode","__detail","_editor","_prevNode","_dom","exportDOM","exportJSON","_serializedNode","replaceWith","includeChildren","toReplaceKey","writableReplaceWith","forEach","nodeToInsert","writableSelf","writableNodeToInsert","elementAnchorSelectionOnNode","elementFocusSelectionOnNode","oldIndex","oldParentKey","insertKey","writableParentKey","editorKlass","DecoratorNode","config","ElementNode","getFormatType","getIndent","parentLastChild","getAllTextNodes","textNodes","subChildrenNodes","firstKey","getFirstChildOrThrow","getLastChildOrThrow","getDirection","_anchorOffset","_focusOffset","childrenCount","nodesToAppend","setDirection","setIndent","indentLevel","deleteCount","nodesToInsert","nodesToInsertLength","oldSize","writableSelfKey","nodesToInsertKeys","nodesToRemoveKeys","nodeAfterRange","nodeBeforeRange","newSize","nodeToDelete","nodeKeyToDelete","writableNodeToDelete","nodeKeyToInsert","writablePrevNode","writableNodeAfterRange","nodesToRemoveKeySet","nodesToInsertKeySet","isPointRemoved","version","canInsertTab","canIndent","excludeFromCopy","destination","canMergeWith","extractWithChild","RootNode","cachedText","$createRootNode","current","EditorState","exportNodeToJSON","serializedChildren","serializedChildNode","toJSON","LineBreakNode","importDOM","br","conversion","convertLineBreakElement","priority","serializedLineBreakNode","getElementOuterTag","getElementInnerTag","setTextThemeClassNames","prevFormat","textClassNames","domClassList","hasUnderlineStrikethrough","prevUnderlineStrikethrough","nextUnderlineStrikethrough","flag","diffComposedText","nextText","suffix","insert","deleteData","insertData","createTextInnerDOM","innerDOM","innerTag","wrapElementWith","el","TextNode","getDetail","getMode","getStyle","outerTag","cssText","prevOuterTag","nextOuterTag","prevInnerTag","nextInnerTag","prevTag","nextTag","prevInnerDOM","nextInnerDOM","prevStyle","nextStyle","convertTextDOMNode","convertBringAttentionToElement","convertLineBreakToElement","convertTextFormatElement","em","span","convertSpanElement","strong","sub","sup","u","setDetail","setMode","mode","setStyle","toggleDirectionless","toggleUnmergeable","newText","moveSelection","handledTextLength","updatedText","splitOffsets","offsetsSet","string","partsLength","firstPart","hasReplacedSelf","textSize","partSize","nextTextSize","insertionIndex","targetKey","targetText","isTextEntity","hasBoldFontWeight","fontWeight","hasLinethroughTextDecoration","textDecoration","hasItalicFontStyle","fontStyle","hasUnderlineTextDecoration","verticalAlign","forChild","lexicalNode","hasNormalFontWeight","_parent","preformatted","nodeNameToTextFormat","toLowerCase","ParagraphNode","p","convertParagraphElement","textAlign","textIndent","_","$isParagraphNode","COMMAND_PRIORITY_EDITOR","COMMAND_PRIORITY_LOW","COMMAND_PRIORITY_NORMAL","COMMAND_PRIORITY_HIGH","COMMAND_PRIORITY_CRITICAL","prevRootElement","nextRootElement","keyNodeMap","initializeConversionCache","conversionCache","handledConversions","bind","map","keys","currentCache","createEditor","parentEditor","disableEvents","namespace","initialEditorState","onError","editable","replacementClass","with","proto","prototype","method","hasOwnProperty","console","warn","LexicalEditor","htmlConversions","textcontent","_htmlConversions","registerUpdateListener","listenerSetOrMap","registerEditableListener","registerDecoratorListener","registerTextContentListener","registerRootListener","registerCommand","commandsMap","listenersInPriorityOrder","String","registerMutationListener","registerNodeTransform","hasNodes","getDecorators","setRootElement","userSelect","whiteSpace","wordBreak","setEditorState","maybeStringifiedEditorState","JSON","parse","defaultSelection","blur","setEditable","DEPRECATED_GridCellNode","colSpan","__colSpan","DEPRECATED_GridNode","DEPRECATED_GridRowNode","exports","$normalizeSelection__EXPERIMENTAL"],"sources":["/Users/hanauchiakiya/GitHub/re-Think/node_modules/lexical/Lexical.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction createCommand(type) {\n  return {\n    type\n  } ;\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3; // Reconciling\n\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2; // Text node modes\n\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2; // IS_INERT = 3\n// Text node formatting\n\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT; // Text node details\n\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1; // Element node formatting\n\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6; // Reconciliation\n\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b'; // For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\n\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n'; // For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\n\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF'; // eslint-disable-next-line no-misleading-character-class\n\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']'); // eslint-disable-next-line no-misleading-character-class\n\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcesssingMutations() {\n  return isProcessingMutations;\n}\n\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\n\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\n\nfunction isManagedLineBreak(dom, target, editor) {\n  return (// @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom || // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\n\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\n\nfunction handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n\n  const text = target.nodeValue;\n\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\n\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\n\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement(); // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            handleTextMutation( // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true; // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n\n          const addedDOMs = mutation.addedNodes;\n\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      } // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n\n\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n\n              if (correctDOM === null) {\n                continue;\n              }\n\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      } // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n\n\n      const records = observer.takeRecords(); // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        } // Clear any of those removal mutations\n\n\n        observer.takeRecords();\n      }\n\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction flushRootMutations(editor) {\n  const observer = editor._observer;\n\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet keyCounter = 1;\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n\n  if (activeElement === null) {\n    return false;\n  }\n\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' && // @ts-ignore iternal field\n  activeElement.__lexicalEditor == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) && // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n\n  while (currentNode != null) {\n    // @ts-expect-error: internal field\n    const editor = currentNode.__lexicalEditor;\n\n    if (editor != null) {\n      return editor;\n    }\n\n    currentNode = getParentElement(currentNode);\n  }\n\n  return null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\n\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\n\nfunction getDOMTextNode(element) {\n  let node = element;\n\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n\n    node = node.firstChild;\n  }\n\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  const isStateFlagPresent = format & activeFormat;\n\n  if (isStateFlagPresent && (alignWithFormat === null || (alignWithFormat & activeFormat) === 0)) {\n    // Remove the state flag.\n    return format ^ activeFormat;\n  }\n\n  if (alignWithFormat === null || alignWithFormat & activeFormat) {\n    // Add the state flag.\n    return format | activeFormat;\n  }\n\n  return format;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    node.__key = existingKey;\n    return;\n  }\n\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n\n  editorState._nodeMap.set(key, node); // TODO Split this function into leaf/element\n\n\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n\n  editor._cloneNotNeeded.add(key);\n\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\n\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n\n    const node = nodeMap.get(nextParentKey);\n\n    if (node === undefined) {\n      break;\n    }\n\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\n\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling(); // TODO: this function duplicates a bunch of operations, can be simplified.\n\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n\n      writableNode.__prev = null;\n    }\n\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n\n      writableNode.__next = null;\n    }\n\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n} // Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\n\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n\n  const node = editorState._nodeMap.get(key);\n\n  if (node === undefined) {\n    return null;\n  }\n\n  return node;\n}\nfunction getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor(); // @ts-ignore We intentionally add this to the Node.\n\n  const key = dom[`__lexicalKey_${editor._key}`];\n\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n\n  while (dom != null) {\n    const node = getNodeFromDOMNode(dom, editorState);\n\n    if (node !== null) {\n      return node;\n    }\n\n    dom = getParentElement(dom);\n  }\n\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n\n    if (editorState.isEmpty()) {\n      return;\n    }\n\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n\n    const nodeMap = editorState._nodeMap;\n\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n\n    selection.dirty = true;\n    selection._cachedNodes = null;\n  }\n\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  flushRootMutations(editor);\n}\nfunction getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n\n    return null;\n  }\n\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\n\nfunction getNodeKeyFromDOM( // Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n\n    if (key !== undefined) {\n      return key;\n    }\n\n    node = getParentElement(node);\n  }\n\n  return null;\n}\n\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n\n  if (domSelection === null) {\n    return;\n  }\n\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n\n    if (textContent !== null && $isTextNode(node)) {\n      // Data is intentionally truthy, as we check for boolean, null and empty string.\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n\n    const prevTextContent = node.getTextContent();\n\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n\n        if (!IS_SAFARI && !IS_IOS) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n\n        return;\n      }\n\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing || // Check if character was added at the start, and we need\n      // to clear this input from occurring as that action wasn't\n      // permitted.\n      parent !== null && $isRangeSelection(prevSelection) && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0) {\n        node.markDirty();\n        return;\n      }\n\n      const selection = $getSelection();\n\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\n\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n} // This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\n\n\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(keyCode, altKey, ctrlKey, metaKey) {\n  return keyCode === 9 && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 66 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 73 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 85 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(keyCode, shiftKey) {\n  return isReturn(keyCode) && !shiftKey;\n}\nfunction isLineBreak(keyCode, shiftKey) {\n  return isReturn(keyCode) && shiftKey;\n} // Inserts a new line after the selection\n\nfunction isOpenLineBreak(keyCode, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && keyCode === 79;\n}\nfunction isDeleteWordBackward(keyCode, altKey, ctrlKey) {\n  return isBackspace(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(keyCode, altKey, ctrlKey) {\n  return isDelete(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(keyCode);\n}\nfunction isDeleteLineForward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isDelete(keyCode);\n}\nfunction isDeleteBackward(keyCode, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n\n    return isBackspace(keyCode) || keyCode === 72 && ctrlKey;\n  }\n\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n\n  return isBackspace(keyCode);\n}\nfunction isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n\n    return isDelete(keyCode) || keyCode === 68 && ctrlKey;\n  }\n\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n\n  return isDelete(keyCode);\n}\nfunction isUndo(keyCode, shiftKey, metaKey, ctrlKey) {\n  return keyCode === 90 && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return keyCode === 90 && metaKey && shiftKey;\n  }\n\n  return keyCode === 89 && ctrlKey || keyCode === 90 && ctrlKey && shiftKey;\n}\nfunction isCopy(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n\n  if (keyCode === 67) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n\n  return false;\n}\nfunction isCut(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n\n  if (keyCode === 88) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n\n  return false;\n}\n\nfunction isArrowLeft(keyCode) {\n  return keyCode === 37;\n}\n\nfunction isArrowRight(keyCode) {\n  return keyCode === 39;\n}\n\nfunction isArrowUp(keyCode) {\n  return keyCode === 38;\n}\n\nfunction isArrowDown(keyCode) {\n  return keyCode === 40;\n}\n\nfunction isMoveBackward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(keyCode, ctrlKey, metaKey) {\n  return isArrowUp(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(keyCode, ctrlKey, metaKey) {\n  return isArrowDown(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(keyCode) {\n  return keyCode === 32;\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n\n  return ctrlKey;\n}\nfunction isReturn(keyCode) {\n  return keyCode === 13;\n}\nfunction isBackspace(keyCode) {\n  return keyCode === 8;\n}\nfunction isEscape(keyCode) {\n  return keyCode === 27;\n}\nfunction isDelete(keyCode) {\n  return keyCode === 46;\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  const classNames = classNamesTheme[classNameThemeType]; // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n\n  if (typeof classNames === 'string') {\n    const classNamesArr = classNames.split(' ');\n    classNamesTheme[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n\n  const prevMutation = mutatedNodesByType.get(nodeKey); // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const editorState = getActiveEditorState();\n  const readOnly = editorState._readOnly;\n  const klassType = klass.getType();\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && (readOnly || node.isAttached())) {\n      nodesOfType.push(node);\n    }\n  }\n\n  return nodesOfType;\n}\n\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\n\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n\n      return possibleNode;\n    }\n  }\n\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n\n  if (defaultView === null) {\n    return;\n  }\n\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n\n    let diff = 0;\n\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n\n    if (isBodyElement) {\n      break;\n    }\n\n    element = getParentElement(element);\n  }\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode, offset = 0) {\n  if (offset !== 0) {\n    {\n      throw Error(`TODO`);\n    }\n  }\n\n  const selection = $getSelection();\n\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n\n    parent = parent.getParent();\n  }\n\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n\n    parent = parent.getParentOrThrow();\n  }\n\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\nfunction $copyNode(node) {\n  // @ts-ignore\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n\n  const registeredNode = editor._nodes.get(nodeType);\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n\n  const replaceFunc = registeredNode.replace;\n\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n\n    return replacementNode;\n  }\n\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\n\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = blockCursorTheme.split(' '); // @ts-expect-error: intentional\n\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n\n  return element;\n}\n\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\n\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n\n      rootElement.style.caretColor = 'transparent';\n\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n\n      return;\n    }\n  } // Remove cursor\n\n\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n\n      delete decorators[key];\n    }\n  }\n}\n\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, dirtyNodes) {\n  let child = node.getFirstChild();\n\n  while (child !== null) {\n    const childKey = child.__key;\n\n    if (child !== undefined && child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, dirtyNodes);\n      } // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n\n\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n\n      nodeMap.delete(childKey);\n    }\n\n    child = child.isAttached() ? child.getNextSibling() : null;\n  }\n}\n\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n\n      nodeMap.delete(nodeKey);\n    }\n  }\n\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, dirtyElements);\n        } // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n\n\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n\n        nodeMap.delete(nodeKey);\n      }\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\n\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\n\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  } // Backward\n\n\n  let previousNode;\n\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  } // Forward\n\n\n  let nextNode;\n\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\n\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\n\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  } // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n\n\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\n\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\n\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\n\nfunction setElementIndent(dom, indent) {\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : indent * 20 + 'px');\n}\n\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\n\nfunction createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1); // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      createChildrenWithDirection(children, endIndex, node, dom);\n\n      if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n        subTreeTextContent += DOUBLE_LINE_BREAK; // @ts-expect-error: internal field\n\n        dom.__lexicalTextContent = subTreeTextContent;\n      }\n    }\n\n    const format = node.__format;\n\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      } // Decorators are always non editable\n\n\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\n\nfunction createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  createChildren(children, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\n\nfunction createChildren(children, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n\n  for (; startIndex <= endIndex; ++startIndex) {\n    createNode(children[startIndex], dom, insertDOM);\n  } // @ts-expect-error: internal field\n\n\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\n\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n} // If we end an element with a LineBreakNode, then we need to add an additional <br>\n\n\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n\n      if (element != null) {\n        dom.removeChild(element);\n      } // @ts-expect-error: internal field\n\n\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br'); // @ts-expect-error: internal field\n\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\n\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent = // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent; // @ts-expect-error: internal field\n\n  const previousDirection = dom.__lexicalDir;\n\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined; // Remove the old theme classes if they exist\n\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = previousDirectionTheme.split(' ');\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        } // @ts-ignore: intentional\n\n\n        classList.remove(...previousDirectionTheme);\n      }\n\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = nextDirectionTheme.split(' '); // @ts-expect-error: intentional\n\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        } // Update direction\n\n\n        dom.dir = direction;\n      }\n\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n\n    activeTextDirection = direction; // @ts-expect-error: internal field\n\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent; // @ts-expect-error: internal field\n\n    dom.__lexicalDir = direction;\n  }\n}\n\nfunction reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\n\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n\n  return children;\n}\n\nfunction reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n\n    if (prevFirstChildKey === nextFrstChildKey) {\n      reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = createNode(nextFrstChildKey, null, null);\n      dom.replaceChild(replacementDOM, lastDOM);\n      destroyNode(prevFirstChildKey, null);\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        createChildren(nextChildren, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      reconcileNodeChildren(prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  } // @ts-expect-error: internal field\n\n\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\n\nfunction reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key); // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      } // @ts-expect-error: internal field\n\n\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n\n    return dom;\n  } // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n\n\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  } // Update node. If it returns true, we need to unmount and re-create the node\n\n\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = createNode(key, null, null);\n\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n\n    const nextFormat = nextNode.__format;\n\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n\n    if (isDirty) {\n      reconcileChildrenWithDirection(prevNode, nextNode, dom);\n\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    nextNode = nextNode.getWritable();\n    nextNode.__cachedText = editorTextContent;\n  }\n\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n\n  return dom;\n}\n\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n\n  pendingDecorators[key] = decorator;\n}\n\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\n\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n\n  return nextSibling;\n}\n\nfunction reconcileNodeChildren(prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n\n          reconcileNode(nextKey, dom);\n        }\n\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n  }\n\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    createChildren(nextChildren, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\n\nfunction reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = ''; // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap); // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  reconcileNode('root', null); // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n\n  activeEditor$1 = undefined; // @ts-ignore\n\n  activeEditorNodes = undefined; // @ts-ignore\n\n  activeDirtyElements = undefined; // @ts-ignore\n\n  activeDirtyLeaves = undefined; // @ts-ignore\n\n  activePrevNodeMap = undefined; // @ts-ignore\n\n  activeNextNodeMap = undefined; // @ts-ignore\n\n  activeEditorConfig = undefined; // @ts-ignore\n\n  activePrevKeyToDOMMap = undefined; // @ts-ignore\n\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap; // @ts-ignore We intentionally add this to the Node.\n\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\n\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\n\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\n\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = 0;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet rootElementsRegistered = 0;\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, 0, 'root', 0]; // This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key || // If we're working with a non-text node.\n  !$isTextNode(anchorNode) || // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT || // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() || // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) || // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 || // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) || // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\n\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\n\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false; // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n\n    const selection = $getSelection(); // Update the selection format\n\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        } // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n\n\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n        } else {\n          if (anchor.type === 'text') {\n            selection.format = anchorNode.getFormat();\n          } else if (anchor.type === 'element') {\n            selection.format = 0;\n          }\n        }\n      } else {\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n\n          if ($isTextNode(node)) {\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n} // This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\n\n\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n\n      if (domSelection && anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n        domSelection.removeAllRanges();\n        selection.dirty = true;\n      }\n    }\n\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\n\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\n\nfunction $applyTargetRange(selection, event) {\n  if (event.getTargetRanges) {\n    const targetRange = event.getTargetRanges()[0];\n\n    if (targetRange) {\n      selection.applyDOMRange(targetRange);\n    }\n  }\n}\n\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\n\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 229 && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\n\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType; // We let the browser do its own thing for composition.\n\n  if (inputType === 'deleteCompositionText' || // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n\n        $setSelection(prevSelection.clone());\n      }\n\n      if ($isRangeSelection(selection)) {\n        // Used for handling backspace in Android.\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && selection.anchor.key === selection.focus.key) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0; // Fixes an Android bug where selection flickers when backspacing\n\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n          }\n        } else {\n          event.preventDefault();\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n        }\n\n        return;\n      }\n    }\n\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n\n    const data = event.data;\n\n    if (!selection.dirty && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode())) {\n      $applyTargetRange(selection, event);\n    }\n\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    } // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n\n\n    event.preventDefault();\n\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null); // Some browsers do not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n\n          if (isInsertLineBreak) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n\n          break;\n        }\n\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, undefined);\n          }\n\n          break;\n        }\n\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, undefined);\n          break;\n        }\n\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n\n    }\n  });\n}\n\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n\n      if (domSelection === null) {\n        return;\n      }\n\n      const offset = anchor.offset; // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, offset) + data + anchorNode.getTextContent().slice(offset + selection.focus.offset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n\n      const textLength = data.length; // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      } // This ensures consistency on Android.\n\n\n      if (!IS_SAFARI && !IS_IOS && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      $updateSelectedTextFromDOM(false, editor); // onInput always fires after onCompositionEnd for FF.\n\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    } // Also flush any other mutations that might have occurred\n    // since the change.\n\n\n    $flushMutations();\n  });\n}\n\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      $setCompositionKey(anchor.key);\n\n      if ( // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY || // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || selection.anchor.getNode().getFormat() !== selection.format) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\n\nfunction onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null); // Handle termination of composition.\n\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n\n      return;\n    } // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n\n\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n\n  $updateSelectedTextFromDOM(true, editor, data);\n}\n\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\n\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.keyCode;\n\n  if (editor.isComposing()) {\n    return;\n  }\n\n  const {\n    keyCode,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n\n  if (isMoveForward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(keyCode, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(keyCode)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(keyCode, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(keyCode, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(keyCode, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(keyCode)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(keyCode)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(keyCode)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(keyCode, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      }\n    }\n  }\n\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\n\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n\n  if (eventHandles === undefined) {\n    eventHandles = []; // @ts-expect-error: internal field\n\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n\n  return eventHandles;\n} // Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\n\n\nconst activeNestedEditorsMap = new Map();\n\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n\n  if (domSelection === null) {\n    return;\n  }\n\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n\n  if (nextActiveEditor === null) {\n    return;\n  }\n\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n\n      if (domAnchorNode === null) {\n        return;\n      }\n\n      const nodeType = domAnchorNode.nodeType; // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n\n      const newSelection = internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor);\n      $setSelection(newSelection);\n    });\n  } // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n\n\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n\n  onSelectionChange(domSelection, nextActiveEditor, true); // If newly selected editor is nested, then add it to the map, clean map otherwise\n\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\n\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\n\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\n\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  if (rootElementsRegistered === 0) {\n    const doc = rootElement.ownerDocument;\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n\n  rootElementsRegistered++; // @ts-expect-error: internal field\n\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n\n      stopLexicalPropagation(event);\n\n      if (editor.isEditable()) {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n\n      stopLexicalPropagation(event);\n\n      if (editor.isEditable()) {\n        switch (eventName) {\n          case 'cut':\n            return dispatchCommand(editor, CUT_COMMAND, event);\n\n          case 'copy':\n            return dispatchCommand(editor, COPY_COMMAND, event);\n\n          case 'paste':\n            return dispatchCommand(editor, PASTE_COMMAND, event);\n\n          case 'dragstart':\n            return dispatchCommand(editor, DRAGSTART_COMMAND, event);\n\n          case 'dragover':\n            return dispatchCommand(editor, DRAGOVER_COMMAND, event);\n\n          case 'dragend':\n            return dispatchCommand(editor, DRAGEND_COMMAND, event);\n\n          case 'focus':\n            return dispatchCommand(editor, FOCUS_COMMAND, event);\n\n          case 'blur':\n            {\n              return dispatchCommand(editor, BLUR_COMMAND, event);\n            }\n\n          case 'drop':\n            return dispatchCommand(editor, DROP_COMMAND, event);\n        }\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  if (rootElementsRegistered !== 0) {\n    rootElementsRegistered--; // We only want to have a single global selectionchange event handler, shared\n    // between all editor instances.\n\n    if (rootElementsRegistered === 0) {\n      const doc = rootElement.ownerDocument;\n      doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n    }\n  } // @ts-expect-error: internal field\n\n\n  const editor = rootElement.__lexicalEditor;\n\n  if (editor !== null && editor !== undefined) {\n    cleanActiveNestedEditorsMap(editor); // @ts-expect-error: internal field\n\n    rootElement.__lexicalEditor = null;\n  }\n\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  } // @ts-expect-error: internal field\n\n\n  rootElement.__lexicalEventHandles = [];\n}\n\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\n\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n\n    return aNode.isBefore(bNode);\n  }\n\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n\n    return node;\n  }\n\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n\n      if (selection !== null) {\n        selection._cachedNodes = null;\n        selection.dirty = true;\n      }\n    }\n  }\n\n}\n\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\n\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n\n  point.set(key, offset, type);\n}\n\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\n\nfunction $transferStartingElementPointToTextPoint(start, end, format) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  } // Transfer the element point to a text point.\n\n\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n\n  start.set(textNode.__key, 0, 'text');\n}\n\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\n\nclass NodeSelection {\n  constructor(objects) {\n    this.dirty = false;\n    this._nodes = objects;\n    this._cachedNodes = null;\n  }\n\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n\n  add(key) {\n    this.dirty = true;\n\n    this._nodes.add(key);\n\n    this._cachedNodes = null;\n  }\n\n  delete(key) {\n    this.dirty = true;\n\n    this._nodes.delete(key);\n\n    this._cachedNodes = null;\n  }\n\n  clear() {\n    this.dirty = true;\n\n    this._nodes.clear();\n\n    this._cachedNodes = null;\n  }\n\n  has(key) {\n    return this._nodes.has(key);\n  }\n\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n\n  extract() {\n    return this.getNodes();\n  }\n\n  insertRawText(text) {// Do nothing?\n  }\n\n  insertText() {// Do nothing?\n  }\n\n  insertNodes(nodes, selectStart) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd; // Insert nodes\n\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n\n    selectionAtEnd.insertNodes(nodes, selectStart); // Remove selected nodes\n\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n\n    return true;\n  }\n\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n\n    const objects = this._nodes;\n    const nodes = [];\n\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n\n    return nodes;\n  }\n\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n\n    return textContent;\n  }\n\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass GridSelection {\n  constructor(gridKey, anchor, focus) {\n    this.gridKey = gridKey;\n    this.anchor = anchor;\n    this.focus = focus;\n    this.dirty = false;\n    this._cachedNodes = null;\n    anchor._selection = this;\n    focus._selection = this;\n  }\n\n  is(selection) {\n    if (!DEPRECATED_$isGridSelection(selection)) {\n      return false;\n    }\n\n    return this.gridKey === selection.gridKey && this.anchor.is(selection.anchor) && this.focus.is(selection.focus);\n  }\n\n  set(gridKey, anchorCellKey, focusCellKey) {\n    this.dirty = true;\n    this.gridKey = gridKey;\n    this.anchor.key = anchorCellKey;\n    this.focus.key = focusCellKey;\n    this._cachedNodes = null;\n  }\n\n  clone() {\n    return new GridSelection(this.gridKey, this.anchor, this.focus);\n  }\n\n  isCollapsed() {\n    return false;\n  }\n\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n\n  getCharacterOffsets() {\n    return getCharacterOffsets(this);\n  }\n\n  extract() {\n    return this.getNodes();\n  }\n\n  insertRawText(text) {// Do nothing?\n  }\n\n  insertText() {// Do nothing?\n  }\n\n  insertNodes(nodes, selectStart) {\n    const focusNode = this.focus.getNode();\n    const selection = $normalizeSelection(focusNode.select(0, focusNode.getChildrenSize()));\n    return selection.insertNodes(nodes, selectStart);\n  }\n\n  getShape() {\n    const anchorCellNode = $getNodeByKey(this.anchor.key);\n\n    if (!(anchorCellNode !== null)) {\n      throw Error(`getNodes: expected to find AnchorNode`);\n    }\n\n    const anchorCellNodeIndex = anchorCellNode.getIndexWithinParent();\n    const anchorCelRoweIndex = anchorCellNode.getParentOrThrow().getIndexWithinParent();\n    const focusCellNode = $getNodeByKey(this.focus.key);\n\n    if (!(focusCellNode !== null)) {\n      throw Error(`getNodes: expected to find FocusNode`);\n    }\n\n    const focusCellNodeIndex = focusCellNode.getIndexWithinParent();\n    const focusCellRowIndex = focusCellNode.getParentOrThrow().getIndexWithinParent();\n    const startX = Math.min(anchorCellNodeIndex, focusCellNodeIndex);\n    const stopX = Math.max(anchorCellNodeIndex, focusCellNodeIndex);\n    const startY = Math.min(anchorCelRoweIndex, focusCellRowIndex);\n    const stopY = Math.max(anchorCelRoweIndex, focusCellRowIndex);\n    return {\n      fromX: Math.min(startX, stopX),\n      fromY: Math.min(startY, stopY),\n      toX: Math.max(startX, stopX),\n      toY: Math.max(startY, stopY)\n    };\n  }\n\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n\n    const nodesSet = new Set();\n    const {\n      fromX,\n      fromY,\n      toX,\n      toY\n    } = this.getShape();\n    const gridNode = $getNodeByKey(this.gridKey);\n\n    if (!DEPRECATED_$isGridNode(gridNode)) {\n      {\n        throw Error(`getNodes: expected to find GridNode`);\n      }\n    }\n\n    nodesSet.add(gridNode);\n    const gridRowNodes = gridNode.getChildren();\n\n    for (let r = fromY; r <= toY; r++) {\n      const gridRowNode = gridRowNodes[r];\n      nodesSet.add(gridRowNode);\n\n      if (!DEPRECATED_$isGridRowNode(gridRowNode)) {\n        {\n          throw Error(`getNodes: expected to find GridRowNode`);\n        }\n      }\n\n      const gridCellNodes = gridRowNode.getChildren();\n\n      for (let c = fromX; c <= toX; c++) {\n        const gridCellNode = gridCellNodes[c];\n\n        if (!DEPRECATED_$isGridCellNode(gridCellNode)) {\n          {\n            throw Error(`getNodes: expected to find GridCellNode`);\n          }\n        }\n\n        nodesSet.add(gridCellNode);\n        const children = gridCellNode.getChildren();\n\n        while (children.length > 0) {\n          const child = children.shift();\n          nodesSet.add(child);\n\n          if ($isElementNode(child)) {\n            children.unshift(...child.getChildren());\n          }\n        }\n      }\n    }\n\n    const nodes = Array.from(nodesSet);\n\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n\n    return nodes;\n  }\n\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n\n    return textContent;\n  }\n\n}\nfunction DEPRECATED_$isGridSelection(x) {\n  return x instanceof GridSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format) {\n    this.anchor = anchor;\n    this.focus = focus;\n    this.dirty = false;\n    this.format = format;\n    this._cachedNodes = null;\n    anchor._selection = this;\n    focus._selection = this;\n  }\n\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format;\n  }\n\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = anchor.getNode();\n    let lastNode = focus.getNode();\n\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(anchor.offset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n\n    if ($isElementNode(lastNode)) {\n      const lastNodeDescendant = lastNode.getDescendantByIndex(focus.offset);\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n\n    let nodes;\n\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n\n    return nodes;\n  }\n\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n\n  getTextContent() {\n    const nodes = this.getNodes();\n\n    if (nodes.length === 0) {\n      return '';\n    }\n\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n\n          if (node === firstNode) {\n            if (node === lastNode) {\n              text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n\n    return textContent;\n  }\n\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format);\n    return selection;\n  }\n\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n\n  insertRawText(text) {\n    const parts = text.split(/\\r?\\n/);\n\n    if (parts.length === 1) {\n      this.insertText(text);\n    } else {\n      const nodes = [];\n      const length = parts.length;\n\n      for (let i = 0; i < length; i++) {\n        const part = parts[i];\n\n        if (part !== '') {\n          nodes.push($createTextNode(part));\n        }\n\n        if (i !== length - 1) {\n          nodes.push($createLineBreakNode());\n        }\n      }\n\n      this.insertNodes(nodes);\n    }\n  }\n\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = this.isCollapsed() || anchor.isBefore(focus);\n    const format = this.format;\n\n    if (isBefore && anchor.type === 'element') {\n      $transferStartingElementPointToTextPoint(anchor, focus, format);\n    } else if (!isBefore && focus.type === 'element') {\n      $transferStartingElementPointToTextPoint(focus, anchor, format);\n    }\n\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const firstPoint = isBefore ? anchor : focus;\n    const endPoint = isBefore ? focus : anchor;\n    const startOffset = firstPoint.offset;\n    const endOffset = endPoint.offset;\n    let firstNode = selectedNodes[0];\n\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n\n      if (!$isTextNode(nextSibling) || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n\n      prevSibling.select();\n      firstNode = prevSibling;\n\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n\n      const firstNodeFormat = firstNode.getFormat();\n\n      if (startOffset === endOffset && firstNodeFormat !== format) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.select();\n\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          } // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n\n\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n\n          return;\n        }\n      }\n\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]); // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode; // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      } // Handle mutations to the last node.\n\n\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n\n          lastNode = lastNode.spliceText(0, endOffset, '');\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      } // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n\n\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement); // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n\n          parent = parent.getParent();\n        }\n      } // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n\n\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      } // Remove all selected nodes that haven't already been removed.\n\n\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n\n  removeText() {\n    this.insertText('');\n  }\n\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType); // When changing format, we should stop composition\n\n      $setCompositionKey(null);\n      return;\n    }\n\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n\n    const selectedTextNodesLength = selectedTextNodes.length;\n\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType); // When changing format, we should stop composition\n\n      $setCompositionKey(null);\n      return;\n    }\n\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset; // In case selection started at the end of text node use next text node\n\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n\n    if (firstNode == null) {\n      return;\n    }\n\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize(); // Single node selected\n\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      } // The entire node is selected, so just format it\n\n\n      if (startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat); // Update selection only if starts/ends on text node\n\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n\n      this.format = firstNextFormat;\n      return;\n    } // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n\n\n    if (startOffset !== 0) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat); // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize()) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n\n      lastNode.setFormat(lastNextFormat);\n    } // Process all text nodes in between\n\n\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n\n      if (!textNode.isToken()) {\n        const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n        textNode.setFormat(nextFormat);\n      }\n    } // Update selection only if starts/ends on text node\n\n\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n\n    this.format = firstNextFormat | lastNextFormat;\n  }\n\n  insertNodes(nodes, selectStart) {\n    // If there is a range selected remove the text in it\n    if (!this.isCollapsed()) {\n      const selectionEnd = this.isBackward() ? this.anchor : this.focus;\n      const nextSibling = selectionEnd.getNode().getNextSibling();\n      const nextSiblingKey = nextSibling ? nextSibling.getKey() : null;\n      const prevSibling = selectionEnd.getNode().getPreviousSibling();\n      const prevSiblingKey = prevSibling ? prevSibling.getKey() : null;\n      this.removeText(); // If the selection has been moved to an adjacent inline element, create\n      // a temporary text node that we can insert the nodes after.\n\n      if (this.isCollapsed() && this.focus.type === 'element') {\n        let textNode;\n\n        if (this.focus.key === nextSiblingKey && this.focus.offset === 0) {\n          textNode = $createTextNode();\n          this.focus.getNode().insertBefore(textNode);\n        } else if (this.focus.key === prevSiblingKey && this.focus.offset === this.focus.getNode().getChildrenSize()) {\n          textNode = $createTextNode();\n          this.focus.getNode().insertAfter(textNode);\n        }\n\n        if (textNode) {\n          this.focus.set(textNode.__key, 0, 'text');\n          this.anchor.set(textNode.__key, 0, 'text');\n        }\n      }\n    }\n\n    const anchor = this.anchor;\n    const anchorOffset = anchor.offset;\n    const anchorNode = anchor.getNode();\n    let target = anchorNode;\n\n    if (anchor.type === 'element') {\n      const element = anchor.getNode();\n      const placementNode = element.getChildAtIndex(anchorOffset - 1);\n\n      if (placementNode === null) {\n        target = element;\n      } else {\n        target = placementNode;\n      }\n    }\n\n    const siblings = []; // Get all remaining text node siblings in this element so we can\n    // append them after the last node we're inserting.\n\n    const nextSiblings = anchorNode.getNextSiblings();\n    const topLevelElement = $isRootOrShadowRoot(anchorNode) ? null : anchorNode.getTopLevelElementOrThrow();\n\n    if ($isTextNode(anchorNode)) {\n      const textContent = anchorNode.getTextContent();\n      const textContentLength = textContent.length;\n\n      if (anchorOffset === 0 && textContentLength !== 0) {\n        const prevSibling = anchorNode.getPreviousSibling();\n\n        if (prevSibling !== null) {\n          target = prevSibling;\n        } else {\n          target = anchorNode.getParentOrThrow();\n        }\n\n        siblings.push(anchorNode);\n      } else if (anchorOffset === textContentLength) {\n        target = anchorNode;\n      } else if (anchorNode.isToken()) {\n        // Do nothing if we're inside a token node\n        return false;\n      } else {\n        // If we started with a range selected grab the danglingText after the\n        // end of the selection and put it on our siblings array so we can\n        // append it after the last node we're inserting\n        let danglingText;\n        [target, danglingText] = anchorNode.splitText(anchorOffset);\n        siblings.push(danglingText);\n      }\n    }\n\n    const startingNode = target;\n    siblings.push(...nextSiblings);\n    const firstNode = nodes[0];\n    let didReplaceOrMerge = false;\n    let lastNode = null; // Time to insert the nodes!\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      if (!$isDecoratorNode(target) && $isElementNode(node) && !node.isInline()) {\n        // -----\n        // Heuristics for the replacement or merging of elements\n        // -----\n        // If we have an incoming element node as the first node, then we'll need\n        // see if we can merge any descendant leaf nodes into our existing target.\n        // We can do this by finding the first descendant in our node and then we can\n        // pluck it and its parent (siblings included) out and insert them directly\n        // into our target. We only do this for the first node, as we are only\n        // interested in merging with the anchor, which is our target.\n        //\n        // If we apply either the replacement or merging heuristics, we need to be\n        // careful that we're not trying to insert a non-element node into a root node,\n        // so we check if the target's parent after this logic is the root node and if\n        // so we trigger an invariant to ensure this problem is caught in development\n        // and fixed accordingly.\n        if (node.is(firstNode)) {\n          if ($isElementNode(target) && target.isEmpty() && target.canReplaceWith(node)) {\n            target.replace(node);\n            target = node;\n            didReplaceOrMerge = true;\n            continue;\n          } // We may have a node tree where there are many levels, for example with\n          // lists and tables. So let's find the first descendant to try and merge\n          // with. So if we have the target:\n          //\n          // Paragraph (1)\n          //   Text (2)\n          //\n          // and we are trying to insert:\n          //\n          // ListNode (3)\n          //   ListItemNode (4)\n          //     Text (5)\n          //   ListItemNode (6)\n          //\n          // The result would be:\n          //\n          // Paragraph (1)\n          //   Text (2)\n          //   Text (5)\n          //\n\n\n          const firstDescendant = node.getFirstDescendant();\n\n          if ($isLeafNode(firstDescendant)) {\n            let element = firstDescendant.getParentOrThrow();\n\n            while (element.isInline()) {\n              element = element.getParentOrThrow();\n            }\n\n            const children = element.getChildren();\n            const childrenLength = children.length;\n\n            if ($isElementNode(target)) {\n              let firstChild = target.getFirstChild();\n\n              for (let s = 0; s < childrenLength; s++) {\n                const child = children[s];\n\n                if (firstChild === null) {\n                  target.append(child);\n                } else {\n                  firstChild.insertAfter(child);\n                }\n\n                firstChild = child;\n              }\n            } else {\n              for (let s = childrenLength - 1; s >= 0; s--) {\n                target.insertAfter(children[s]);\n              }\n\n              target = target.getParentOrThrow();\n            }\n\n            lastNode = children[childrenLength - 1];\n            element.remove();\n            didReplaceOrMerge = true;\n\n            if (element.is(node)) {\n              continue;\n            }\n          }\n        }\n\n        if ($isTextNode(target)) {\n          if (topLevelElement === null) {\n            {\n              throw Error(`insertNode: topLevelElement is root node`);\n            }\n          }\n\n          target = topLevelElement;\n        }\n      } else if (didReplaceOrMerge && !$isDecoratorNode(node) && $isRootOrShadowRoot(target.getParent())) {\n        {\n          throw Error(`insertNodes: cannot insert a non-element into a root node`);\n        }\n      }\n\n      didReplaceOrMerge = false;\n\n      if ($isElementNode(target) && !target.isInline()) {\n        lastNode = node;\n\n        if ($isDecoratorNode(node) && !node.isInline()) {\n          target = target.insertAfter(node, false);\n        } else if (!$isElementNode(node)) {\n          const firstChild = target.getFirstChild();\n\n          if (firstChild !== null) {\n            firstChild.insertBefore(node);\n          } else {\n            target.append(node);\n          }\n\n          target = node;\n        } else {\n          if (!node.canBeEmpty() && node.isEmpty()) {\n            continue;\n          }\n\n          if ($isRootNode(target)) {\n            const placementNode = target.getChildAtIndex(anchorOffset);\n\n            if (placementNode !== null) {\n              placementNode.insertBefore(node);\n            } else {\n              target.append(node);\n            }\n\n            target = node;\n          } else {\n            target = target.insertAfter(node, false);\n          }\n        }\n      } else if (!$isElementNode(node) || $isElementNode(node) && node.isInline() || $isDecoratorNode(target) && !target.isInline()) {\n        lastNode = node;\n        target = target.insertAfter(node, false);\n      } else {\n        const nextTarget = target.getParentOrThrow(); // if we're inserting an Element after a LineBreak, we want to move the target to the parent\n        // and remove the LineBreak so we don't have empty space.\n\n        if ($isLineBreakNode(target)) {\n          target.remove();\n        }\n\n        target = nextTarget; // Re-try again with the target being the parent\n\n        i--;\n        continue;\n      }\n    }\n\n    if (selectStart) {\n      // Handle moving selection to start for all nodes\n      if ($isTextNode(startingNode)) {\n        startingNode.select();\n      } else {\n        const prevSibling = target.getPreviousSibling();\n\n        if ($isTextNode(prevSibling)) {\n          prevSibling.select();\n        } else {\n          const index = target.getIndexWithinParent();\n          target.getParentOrThrow().select(index, index);\n        }\n      }\n    }\n\n    if ($isElementNode(target)) {\n      // If the last node to be inserted was a text node,\n      // then we should attempt to move selection to that.\n      const lastChild = $isTextNode(lastNode) ? lastNode : $isElementNode(lastNode) && lastNode.isInline() ? lastNode.getLastDescendant() : target.getLastDescendant();\n\n      if (!selectStart) {\n        // Handle moving selection to end for elements\n        if (lastChild === null) {\n          target.select();\n        } else if ($isTextNode(lastChild)) {\n          if (lastChild.getTextContent() === '') {\n            lastChild.selectPrevious();\n          } else {\n            lastChild.select();\n          }\n        } else {\n          lastChild.selectNext();\n        }\n      }\n\n      if (siblings.length !== 0) {\n        const originalTarget = target;\n\n        for (let i = siblings.length - 1; i >= 0; i--) {\n          const sibling = siblings[i];\n          const prevParent = sibling.getParentOrThrow();\n\n          if ($isElementNode(target) && !$isBlockElementNode(sibling) && !($isDecoratorNode(sibling) && ( // Note: We are only looking for decorators that are inline and not isolated.\n          !sibling.isInline() || sibling.isIsolated()))) {\n            if (originalTarget === target) {\n              target.append(sibling);\n            } else {\n              target.insertBefore(sibling);\n            }\n\n            target = sibling;\n          } else if (!$isElementNode(target) && !$isBlockElementNode(sibling)) {\n            target.insertBefore(sibling);\n            target = sibling;\n          } else {\n            if ($isElementNode(sibling) && !sibling.canInsertAfter(target)) {\n              // @ts-ignore The clone method does exist on the constructor.\n              const prevParentClone = prevParent.constructor.clone(prevParent);\n\n              if (!$isElementNode(prevParentClone)) {\n                {\n                  throw Error(`insertNodes: cloned parent clone is not an element`);\n                }\n              }\n\n              prevParentClone.append(sibling);\n              target.insertAfter(prevParentClone);\n            } else {\n              target.insertAfter(sibling);\n            }\n          } // Check if the prev parent is empty, as it might need\n          // removing.\n\n\n          if (prevParent.isEmpty() && !prevParent.canBeEmpty()) {\n            prevParent.remove();\n          }\n        }\n      }\n    } else if (!selectStart) {\n      // Handle moving selection to end for other nodes\n      if ($isTextNode(target)) {\n        target.select();\n      } else {\n        const element = target.getParentOrThrow();\n        const index = target.getIndexWithinParent() + 1;\n        element.select(index, index);\n      }\n    }\n\n    return true;\n  }\n\n  insertParagraph() {\n    if (!this.isCollapsed()) {\n      this.removeText();\n    }\n\n    const anchor = this.anchor;\n    const anchorOffset = anchor.offset;\n    let currentElement;\n    let nodesToMove = [];\n    let siblingsToMove = [];\n\n    if (anchor.type === 'text') {\n      const anchorNode = anchor.getNode();\n      nodesToMove = anchorNode.getNextSiblings().reverse();\n      currentElement = anchorNode.getParentOrThrow();\n      const isInline = currentElement.isInline();\n      const textContentLength = isInline ? currentElement.getTextContentSize() : anchorNode.getTextContentSize();\n\n      if (anchorOffset === 0) {\n        nodesToMove.push(anchorNode);\n      } else {\n        if (isInline) {\n          // For inline nodes, we want to move all the siblings to the new paragraph\n          // if selection is at the end, we just move the siblings. Otherwise, we also\n          // split the text node and add that and it's siblings below.\n          siblingsToMove = currentElement.getNextSiblings();\n        }\n\n        if (anchorOffset !== textContentLength) {\n          if (!isInline || anchorOffset !== anchorNode.getTextContentSize()) {\n            const [, splitNode] = anchorNode.splitText(anchorOffset);\n            nodesToMove.push(splitNode);\n          }\n        }\n      }\n    } else {\n      currentElement = anchor.getNode();\n\n      if ($isRootOrShadowRoot(currentElement)) {\n        const paragraph = $createParagraphNode();\n        const child = currentElement.getChildAtIndex(anchorOffset);\n        paragraph.select();\n\n        if (child !== null) {\n          child.insertBefore(paragraph, false);\n        } else {\n          currentElement.append(paragraph);\n        }\n\n        return;\n      }\n\n      nodesToMove = currentElement.getChildren().slice(anchorOffset).reverse();\n    }\n\n    const nodesToMoveLength = nodesToMove.length;\n\n    if (anchorOffset === 0 && nodesToMoveLength > 0 && currentElement.isInline()) {\n      const parent = currentElement.getParentOrThrow();\n      const newElement = parent.insertNewAfter(this, false);\n\n      if ($isElementNode(newElement)) {\n        const children = parent.getChildren();\n\n        for (let i = 0; i < children.length; i++) {\n          newElement.append(children[i]);\n        }\n      }\n\n      return;\n    }\n\n    const newElement = currentElement.insertNewAfter(this, false);\n\n    if (newElement === null) {\n      // Handle as a line break insertion\n      this.insertLineBreak();\n    } else if ($isElementNode(newElement)) {\n      // If we're at the beginning of the current element, move the new element to be before the current element\n      const currentElementFirstChild = currentElement.getFirstChild();\n      const isBeginning = anchorOffset === 0 && (currentElement.is(anchor.getNode()) || currentElementFirstChild && currentElementFirstChild.is(anchor.getNode()));\n\n      if (isBeginning && nodesToMoveLength > 0) {\n        currentElement.insertBefore(newElement);\n        return;\n      }\n\n      let firstChild = null;\n      const siblingsToMoveLength = siblingsToMove.length;\n      const parent = newElement.getParentOrThrow(); // For inline elements, we append the siblings to the parent.\n\n      if (siblingsToMoveLength > 0) {\n        for (let i = 0; i < siblingsToMoveLength; i++) {\n          const siblingToMove = siblingsToMove[i];\n          parent.append(siblingToMove);\n        }\n      }\n\n      if (nodesToMoveLength !== 0) {\n        for (let i = 0; i < nodesToMoveLength; i++) {\n          const nodeToMove = nodesToMove[i];\n\n          if (firstChild === null) {\n            newElement.append(nodeToMove);\n          } else {\n            firstChild.insertBefore(nodeToMove);\n          }\n\n          firstChild = nodeToMove;\n        }\n      }\n\n      if (!newElement.canBeEmpty() && newElement.getChildrenSize() === 0) {\n        newElement.selectPrevious();\n        newElement.remove();\n      } else {\n        newElement.selectStart();\n      }\n    }\n  }\n\n  insertLineBreak(selectStart) {\n    const lineBreakNode = $createLineBreakNode();\n    const anchor = this.anchor;\n\n    if (anchor.type === 'element') {\n      const element = anchor.getNode();\n\n      if ($isRootNode(element)) {\n        this.insertParagraph();\n      }\n    }\n\n    if (selectStart) {\n      this.insertNodes([lineBreakNode], true);\n    } else {\n      if (this.insertNodes([lineBreakNode])) {\n        lineBreakNode.selectNext(0, 0);\n      }\n    }\n  }\n\n  getCharacterOffsets() {\n    return getCharacterOffsets(this);\n  }\n\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = getCharacterOffsets(this);\n\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n\n      return [firstNode];\n    }\n\n    const isBefore = anchor.isBefore(focus);\n\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n\n    return selectedNodes;\n  }\n\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move'; // Handle the selection movement around decorators.\n\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n\n          if (!isBackward) {\n            offset++;\n          }\n        }\n\n        focus.set(elementKey, offset, 'element');\n\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n\n        return;\n      }\n    }\n\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n\n    if (!domSelection) {\n      return;\n    }\n\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement; // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    } // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n\n\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity); // Guard against no ranges\n\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0); // Apply the DOM selection to our Lexical selection.\n\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        } // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n\n\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n\n  deleteCharacter(isBackward) {\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const focus = this.focus;\n      let anchorNode = anchor.getNode();\n\n      if (!isBackward && ( // Delete forward handle case\n      anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n        const parent = anchorNode.getParent();\n        const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n\n        if ($isElementNode(nextSibling) && !nextSibling.canExtractContents()) {\n          return;\n        }\n      } // Handle the deletion around decorators.\n\n\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n        }\n\n        return;\n      }\n\n      this.modify('extend', isBackward, 'character');\n\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n\n    this.removeText();\n  }\n\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      if (this.anchor.type === 'text') {\n        this.modify('extend', isBackward, 'lineboundary');\n      } // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n\n\n      const endPoint = isBackward ? this.focus : this.anchor;\n\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n    }\n\n    this.removeText();\n  }\n\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      this.modify('extend', isBackward, 'word');\n    }\n\n    this.removeText();\n  }\n\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\n\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n\n  if (point.type === 'text') {\n    return offset;\n  }\n\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\n\nfunction getCharacterOffsets(selection) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\n\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\n\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // @ts-expect-error Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\n\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\n\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n\n      break;\n    }\n  }\n\n  const nextTextContent = split.join('').trim();\n\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\n\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\n\nfunction internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode; // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false; // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length; // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n\n    if (childDOM === editor._blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (editor._blockCursorElement !== null) {\n      resolvedOffset--;\n    }\n\n    resolvedNode = getNodeFromDOM(childDOM);\n\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = getNodeFromDOM(dom); // Ensure resolvedElement is actually a element.\n\n      if (resolvedElement === null) {\n        return null;\n      }\n\n      if ($isElementNode(resolvedElement)) {\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n\n          if (descendant === null) {\n            resolvedElement = child;\n            resolvedOffset = 0;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n        }\n\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent(); // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = getNodeFromDOM(dom);\n  }\n\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\n\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize(); // @ts-expect-error: intentional\n\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0; // @ts-expect-error: intentional\n\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\n\nfunction normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus); // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n\n    const editor = getActiveEditor();\n\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\n\nfunction internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n\n  const resolvedAnchorPoint = internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n\n  const resolvedFocusPoint = internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = getNodeFromDOM(anchorDOM);\n    const focusNode = getNodeFromDOM(focusDOM); // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  } // Handle normalization of selection when it is at the boundaries.\n\n\n  normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\n\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n} // This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\n\nfunction internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0);\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0);\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction DEPRECATED_$createGridSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new GridSelection('root', anchor, focus);\n}\nfunction internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n\n  if ($isNodeSelection(lastSelection) || DEPRECATED_$isGridSelection(lastSelection)) {\n    return lastSelection.clone();\n  }\n\n  return internalCreateRangeSelection(lastSelection, domSelection, editor);\n}\nfunction internalCreateRangeSelection(lastSelection, domSelection, editor) {\n  const windowObj = editor._window;\n\n  if (windowObj === null) {\n    return null;\n  } // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n\n  const windowEvent = windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcesssingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  } // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n\n\n  const resolvedSelectionPoints = internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset, times = 1) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n\n  const parentKey = parentNode.__key; // Single node. We shift selection but never redimension it\n\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n\n    if (nodeOffset <= selectionOffset) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element'); // The new selection might point to text nodes, try to resolve them\n\n      $updateSelectionResolveTextNodes(selection);\n    }\n\n    return;\n  } // Multiple nodes selected. We shift or redimension selection\n\n\n  const isBackward = selection.isBackward();\n  const firstPoint = isBackward ? focus : anchor;\n  const firstPointNode = firstPoint.getNode();\n  const lastPoint = isBackward ? anchor : focus;\n  const lastPointNode = lastPoint.getNode();\n\n  if (parentNode.is(firstPointNode)) {\n    const firstPointOffset = firstPoint.offset;\n\n    if (nodeOffset <= firstPointOffset) {\n      firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n    }\n  }\n\n  if (parentNode.is(lastPointNode)) {\n    const lastPointOffset = lastPoint.offset;\n\n    if (nodeOffset <= lastPointOffset) {\n      lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n    }\n  } // The new selection might point to text nodes, try to resolve them\n\n\n  $updateSelectionResolveTextNodes(selection);\n}\n\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n\n    return;\n  }\n\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\n\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement; // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n\n    return;\n  }\n\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatChanged = false;\n\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    anchorFormatChanged = anchor.getNode().getFormat() !== nextFormat;\n  }\n\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  } // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n\n\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n\n  if (isCollapsed && (prevSelection === null || anchorFormatChanged || $isRangeSelection(prevSelection) && prevSelection.format !== nextFormat)) {\n    markCollapsedSelectionFormat(nextFormat, nextAnchorOffset, anchorKey, performance.now());\n  } // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n\n\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode && // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n\n    if (anchor.type !== 'element') {\n      return;\n    }\n  } // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n\n\n  try {\n    // When updating more than 1000 nodes on Chrome, it's actually better to defer\n    // updating the selection till the next frame. This is because Chrome's\n    // Blink engine has hard limit on how many DOM nodes it can redraw in\n    // a single cycle, so keeping it to the next frame improves performance.\n    // The downside is that is makes the computation within Lexical more\n    // complex, as now, we've sync update the DOM, but selection no longer\n    // matches.\n    if (IS_CHROME && nodeCount > 1000) {\n      window.requestAnimationFrame(() => domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset));\n    } else {\n      domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n    }\n  } catch (error) {// If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n  }\n\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n\n    if (selectionTarget !== null) {\n      // @ts-ignore Text nodes do have getBoundingClientRect\n      const selectionRect = selectionTarget.getBoundingClientRect();\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes, selectStart) {\n  let selection = $getSelection();\n\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n\n  return selection.insertNodes(nodes, selectStart);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n\n  if (selection === null) {\n    return '';\n  }\n\n  return selection.getTextContent();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().`);\n    }\n  }\n\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().`);\n    }\n  }\n\n  return activeEditor;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n\n  const transformsArrLength = transformsArr.length;\n\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\n\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined && // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\n\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\n\n\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n\n        dirtyLeaves.add(nodeKey);\n      }\n\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size; // We want to prioritize node transforms over element transforms\n\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    } // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n\n\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n\n      const node = nodeMap.get(nodeKey);\n\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\n\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\n\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n\n  const nodeClass = registeredNode.klass;\n\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n\n  return node;\n}\n\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n\n    if (updateFn) {\n      updateFn();\n    } // Make the editorState immutable\n\n\n    editorState._readOnly = true;\n\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n\n  return editorState;\n} // This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = null;\n\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\n\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\n\nfunction commitPendingUpdates(editor) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n\n  if (pendingEditorState === null) {\n    return;\n  } // ======\n  // Reconciliation has started.\n  // ======\n\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false; // We don't want updates to sync block the reconciliation.\n\n    editor._updating = true;\n\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      } // Reset editor and restore incoming editor state to the DOM\n\n\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        commitPendingUpdates(editor);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n\n      Object.freeze(pendingSelection);\n    }\n  }\n\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  const nodeCount = pendingEditorState._nodeMap.size;\n\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n\n    editor._cloneNotNeeded.clear();\n\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n\n  $garbageCollectDetachedDecorators(editor, pendingEditorState); // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window); // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n\n  if (editor._editable && // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement, nodeCount);\n      }\n\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, tags, dirtyLeaves);\n  }\n\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n\n\n  const pendingDecorators = editor._pendingDecorators;\n\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n\n  triggerTextContentListeners(editor, currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  triggerEnqueuedUpdates(editor);\n}\n\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\n\nfunction triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, updateTags, dirtyLeaves) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        updateTags\n      });\n    }\n  }\n}\n\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates, ...payload) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n\n  const editors = getEditorsToPropagate(editor);\n\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      beginUpdate(editor, updateFn, options);\n    }\n  }\n}\n\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\n\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false; // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n\n      nextUpdateFn();\n    }\n  }\n\n  return skipTransforms;\n}\n\nfunction beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection != null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = internalCreateSelection(editor);\n      }\n    }\n\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n\n    const endingCompositionKey = editor._compositionKey;\n\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n\n    const pendingSelection = pendingEditorState._selection;\n\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    } // Restore existing editor state to the DOM\n\n\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n\n    editor._cloneNotNeeded.clear();\n\n    editor._dirtyLeaves = new Set();\n\n    editor._dirtyElements.clear();\n\n    commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n\n  const windowObj = editor._window;\n  const windowEvent = windowObj !== null ? window.event : null;\n  const eventType = windowEvent != null ? windowEvent.type : null;\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor) || editor._blockCursorElement !== null && eventType === 'blur';\n\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\n\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n\n  if (parent === null) {\n    return;\n  }\n\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  }\n\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    removeNode(parent, restoreSelection);\n  }\n\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n\n  constructor(key) {\n    // @ts-expect-error\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type, // @ts-expect-error\n        this.constructor);\n      }\n    }\n  } // Getters and Traversers\n\n\n  getType() {\n    return this.__type;\n  }\n\n  isAttached() {\n    let nodeKey = this.__key;\n\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n\n      const node = $getNodeByKey(nodeKey);\n\n      if (node === null) {\n        break;\n      }\n\n      nodeKey = node.__parent;\n    }\n\n    return false;\n  }\n\n  isSelected() {\n    const selection = $getSelection();\n\n    if (selection == null) {\n      return false;\n    }\n\n    const isSelected = selection.getNodes().some(n => n.__key === this.__key);\n\n    if ($isTextNode(this)) {\n      return isSelected;\n    } // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n\n\n    if ($isRangeSelection(selection) && selection.anchor.type === 'element' && selection.focus.type === 'element' && selection.anchor.key === selection.focus.key && selection.anchor.offset === selection.focus.offset) {\n      return false;\n    }\n\n    return isSelected;\n  }\n\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n\n  getIndexWithinParent() {\n    const parent = this.getParent();\n\n    if (parent === null) {\n      return -1;\n    }\n\n    let node = parent.getFirstChild();\n    let index = 0;\n\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n\n      index++;\n      node = node.getNextSibling();\n    }\n\n    return -1;\n  }\n\n  getParent() {\n    const parent = this.getLatest().__parent;\n\n    if (parent === null) {\n      return null;\n    }\n\n    return $getNodeByKey(parent);\n  }\n\n  getParentOrThrow() {\n    const parent = this.getParent();\n\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n\n    return parent;\n  }\n\n  getTopLevelElement() {\n    let node = this;\n\n    while (node !== null) {\n      const parent = node.getParent();\n\n      if ($isRootOrShadowRoot(parent)) {\n        return node;\n      }\n\n      node = parent;\n    }\n\n    return null;\n  }\n\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n\n    return parent;\n  }\n\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n\n    return parents;\n  }\n\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n\n    return parents;\n  }\n\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n\n    if (parent === null) {\n      return siblings;\n    }\n\n    let node = parent.getFirstChild();\n\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n\n    return siblings;\n  }\n\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n\n    return siblings;\n  }\n\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n\n    const bSet = new Set(b);\n\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n\n    return null;\n  }\n\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n\n    return this.__key === object.__key;\n  }\n\n  isBefore(targetNode) {\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n\n    while (true) {\n      const parent = node.getParentOrThrow();\n\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n\n      node = parent;\n    }\n\n    node = targetNode;\n\n    while (true) {\n      const parent = node.getParentOrThrow();\n\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n\n      node = parent;\n    }\n\n    return indexA < indexB;\n  }\n\n  isParentOf(targetNode) {\n    const key = this.__key;\n\n    if (key === targetNode.__key) {\n      return false;\n    }\n\n    let node = targetNode;\n\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n\n      node = node.getParent();\n    }\n\n    return false;\n  } // TO-DO: this function can be simplified a lot\n\n\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n\n    while (true) {\n      const key = node.__key;\n\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n\n      if (node === targetNode) {\n        break;\n      }\n\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n\n      const parent = node.getParentOrThrow();\n\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n\n      if (parent === targetNode) {\n        break;\n      }\n\n      let parentSibling = null;\n      let ancestor = parent;\n\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        }\n      } while (parentSibling === null);\n\n      node = parentSibling;\n    }\n\n    if (!isBefore) {\n      nodes.reverse();\n    }\n\n    return nodes;\n  }\n\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n\n    return latest;\n  }\n\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key; // Ensure we get the latest node from pending state\n\n    const latestNode = this.getLatest();\n    const parent = latestNode.__parent;\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n\n    if (selection !== null) {\n      selection._cachedNodes = null;\n    }\n\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n\n    const constructor = latestNode.constructor; // @ts-expect-error\n\n    const mutableNode = constructor.clone(latestNode);\n    mutableNode.__parent = parent;\n    mutableNode.__next = latestNode.__next;\n    mutableNode.__prev = latestNode.__prev;\n\n    if ($isElementNode(latestNode) && $isElementNode(mutableNode)) {\n      mutableNode.__first = latestNode.__first;\n      mutableNode.__last = latestNode.__last;\n      mutableNode.__size = latestNode.__size;\n      mutableNode.__indent = latestNode.__indent;\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__dir = latestNode.__dir;\n    } else if ($isTextNode(latestNode) && $isTextNode(mutableNode)) {\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__style = latestNode.__style;\n      mutableNode.__mode = latestNode.__mode;\n      mutableNode.__detail = latestNode.__detail;\n    }\n\n    cloneNotNeeded.add(key);\n    mutableNode.__key = key;\n    internalMarkNodeAsDirty(mutableNode); // Update reference in node map\n\n    nodeMap.set(key, mutableNode);\n    return mutableNode;\n  }\n\n  getTextContent() {\n    return '';\n  }\n\n  getTextContentSize() {\n    return this.getTextContent().length;\n  } // View\n\n\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n  /*\n   * This method is called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n\n\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  } // Setters and mutators\n\n\n  remove(preserveEmptyParent) {\n    removeNode(this, true, preserveEmptyParent);\n  }\n\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) selection = selection.clone();\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    removeNode(self, false, true);\n\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n\n    writableReplaceWith.__prev = prevKey;\n\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n\n    if (includeChildren) {\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n\n    return writableReplaceWith;\n  }\n\n  insertAfter(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n\n    return nodeToInsert;\n  }\n\n  insertBefore(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev; // TODO: this is O(n), can we improve?\n\n    const index = this.getIndexWithinParent();\n\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n\n    return nodeToInsert;\n  }\n\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n\n    if (nextSibling === null) {\n      return parent.select();\n    }\n\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n\n    return nextSibling.select(anchorOffset, focusOffset);\n  } // Proxy to mark something as dirty\n\n\n  markDirty() {\n    this.getWritable();\n  }\n\n}\n\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type); // Common error - split in its own invariant\n\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n\n  const editorKlass = registeredNode.klass;\n\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\n\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n\n  isIsolated() {\n    return false;\n  }\n\n  isInline() {\n    return true;\n  }\n\n  isKeyboardSelectable() {\n    return true;\n  }\n\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__indent = 0;\n    this.__dir = null;\n  }\n\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n\n    return children;\n  }\n\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n\n    return children;\n  }\n\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n\n      child = child.getNextSibling();\n    }\n\n    return textNodes;\n  }\n\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getFirstChild();\n\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n\n      break;\n    }\n\n    return node;\n  }\n\n  getLastDescendant() {\n    let node = this.getLastChild();\n\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getLastChild();\n\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n\n      break;\n    }\n\n    return node;\n  }\n\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length; // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n\n    return firstChild;\n  }\n\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n\n    return lastChild;\n  }\n\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n\n        node = node.getNextSibling();\n        i++;\n      }\n\n      return null;\n    }\n\n    node = this.getLastChild();\n    i = size - 1;\n\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n\n      node = node.getPreviousSibling();\n      i--;\n    }\n\n    return null;\n  }\n\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n\n    return textContent;\n  }\n\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n\n    return false;\n  } // Mutators\n\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n\n    const key = this.__key;\n\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n\n    return selection;\n  }\n\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n\n    if ($isElementNode(firstNode) || $isTextNode(firstNode)) {\n      return firstNode.select(0, 0);\n    } // Decorator or LineBreak\n\n\n    if (firstNode !== null) {\n      return firstNode.selectPrevious();\n    }\n\n    return this.select(0, 0);\n  }\n\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      return lastNode.select();\n    } // Decorator or LineBreak\n\n\n    if (lastNode !== null) {\n      return lastNode.selectNext();\n    }\n\n    return this.select();\n  }\n\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n\n  append(...nodesToAppend) {\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n\n    let prevNode = nodeBeforeRange;\n\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n\n      const writableNodeToInsert = nodeToInsert.getWritable();\n\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      } // Set child parent to self\n\n\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n\n    writableSelf.__size = newSize; // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        } // Cleanup if node can't be empty\n\n\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n\n    return writableSelf;\n  } // JSON serialization\n\n\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  } // These are intended to be extends for specific element heuristics.\n\n\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n\n  canInsertTab() {\n    return false;\n  }\n\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n\n\n  collapseAtStart(selection) {\n    return false;\n  }\n\n  excludeFromCopy(destination) {\n    return false;\n  }\n\n  canExtractContents() {\n    return true;\n  }\n\n  canReplaceWith(replacement) {\n    return true;\n  }\n\n  canInsertAfter(node) {\n    return true;\n  }\n\n  canBeEmpty() {\n    return true;\n  }\n\n  canInsertTextBefore() {\n    return true;\n  }\n\n  canInsertTextAfter() {\n    return true;\n  }\n\n  isInline() {\n    return false;\n  } // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n\n\n  isShadowRoot() {\n    return false;\n  }\n\n  canMergeWith(node) {\n    return false;\n  }\n\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\n\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n\n  while (node) {\n    const nodeKey = node.__key;\n\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n\n    node = node.getParent();\n  }\n\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n  static getType() {\n    return 'root';\n  }\n\n  static clone() {\n    return new RootNode();\n  }\n\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n\n  getTextContent() {\n    const cachedText = this.__cachedText;\n\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n\n    return super.getTextContent();\n  }\n\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  } // View\n\n\n  updateDOM(prevNode, dom) {\n    return false;\n  } // Mutate\n\n\n  append(...nodesToAppend) {\n    for (let i = 0; i < nodesToAppend.length; i++) {\n      const node = nodesToAppend[i];\n\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n\n    return super.append(...nodesToAppend);\n  }\n\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n\n  collapseAtStart() {\n    return true;\n  }\n\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n\n  const pendingSelection = editorState._selection; // Check if we need to update because of changes in selection\n\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\n\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor; // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .exportJSON().`);\n    }\n  } // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n\n  const serializedChildren = serializedNode.children;\n\n  if ($isElementNode(node)) {\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n\n    const children = node.getChildren();\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  } // @ts-expect-error\n\n\n  return serializedNode;\n}\n\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n\n  read(callbackFn) {\n    return readEditorState(this, callbackFn);\n  }\n\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n\n  toJSON() {\n    return readEditorState(this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n\n  constructor(key) {\n    super(key);\n  }\n\n  getTextContent() {\n    return '\\n';\n  }\n\n  createDOM() {\n    return document.createElement('br');\n  }\n\n  updateDOM() {\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      br: node => {\n        const parentElement = node.parentElement; // If the <br> is the only child, then skip including it\n\n        if (parentElement != null && parentElement.firstChild === node && parentElement.lastChild === node) {\n          return null;\n        }\n\n        return {\n          conversion: convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n\n}\n\nfunction convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\n\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n\n  return null;\n}\n\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n\n  return 'span';\n}\n\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList; // Firstly we handle the base theme.\n\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  } // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n\n\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n\n          continue;\n        }\n\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\n\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\n\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing(); // Always add a suffix if we're composing a node\n\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        } // @ts-expect-error\n\n\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\n\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme; // Apply theme class names\n\n  const textClassNames = theme.text;\n\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\n\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n/** @noInheritDoc */\n\n\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  static getType() {\n    return 'text';\n  }\n\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  } // View\n\n\n  createDOM(config) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n\n    return dom;\n  }\n\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n\n    if (prevTag !== nextTag) {\n      return true;\n    }\n\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n\n    let innerDOM = dom;\n\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme; // Apply theme class names\n\n    const textClassNames = theme.text;\n\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      br: () => ({\n        conversion: convertLineBreakToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  } // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n\n\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor); // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n\n    if (element !== null) {\n      if (this.hasFormat('bold')) {\n        element = wrapElementWith(element, 'b');\n      }\n\n      if (this.hasFormat('italic')) {\n        element = wrapElementWith(element, 'i');\n      }\n\n      if (this.hasFormat('strikethrough')) {\n        element = wrapElementWith(element, 's');\n      }\n\n      if (this.hasFormat('underline')) {\n        element = wrapElementWith(element, 'u');\n      }\n    }\n\n    return {\n      element\n    };\n  }\n\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  } // Mutators\n\n\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  } // TODO 0.5 This should just be a `string`.\n\n\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  } // TODO 0.5 This should just be a `string`.\n\n\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n\n  toggleFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return this.setFormat(this.getFormat() ^ formatFlag);\n  }\n\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n\n    if (this.__mode === mode) {\n      return this;\n    }\n\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n\n    return selection;\n  }\n\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n\n    if (index < 0) {\n      index = handledTextLength + index;\n\n      if (index < 0) {\n        index = 0;\n      }\n    }\n\n    const selection = $getSelection();\n\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n\n  canInsertTextBefore() {\n    return true;\n  }\n\n  canInsertTextAfter() {\n    return true;\n  }\n\n  splitText(...splitOffsets) {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n\n      string += textContent[i];\n    }\n\n    if (string !== '') {\n      parts.push(string);\n    }\n\n    const partsLength = parts.length;\n\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n\n    const firstPart = parts[0];\n    const parent = self.getParentOrThrow();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    } // Handle selection\n\n\n    const selection = $getSelection(); // Then handle all other parts\n\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    } // Insert the nodes into the parent's children\n\n\n    internalMarkSiblingsAsDirty(this);\n    const writableParent = parent.getWritable();\n    const insertionIndex = this.getIndexWithinParent();\n\n    if (hasReplacedSelf) {\n      writableParent.splice(insertionIndex, 0, splitNodes);\n      this.remove();\n    } else {\n      writableParent.splice(insertionIndex, 1, splitNodes);\n    }\n\n    if ($isRangeSelection(selection)) {\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n    }\n\n    return splitNodes;\n  }\n\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n\n    const selection = $getSelection();\n\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n\n  isTextEntity() {\n    return false;\n  }\n\n}\n\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode; // Google Docs uses span tags + font-weight for bold text\n\n  const hasBoldFontWeight = span.style.fontWeight === '700'; // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n\n  const hasLinethroughTextDecoration = span.style.textDecoration === 'line-through'; // Google Docs uses span tags + font-style for italic text\n\n  const hasItalicFontStyle = span.style.fontStyle === 'italic'; // Google Docs uses span tags + text-decoration: underline for underline text\n\n  const hasUnderlineTextDecoration = span.style.textDecoration === 'underline'; // Google Docs uses span tags + vertical-align to specify subscript and superscript\n\n  const verticalAlign = span.style.verticalAlign;\n  return {\n    forChild: lexicalNode => {\n      if (!$isTextNode(lexicalNode)) {\n        return lexicalNode;\n      }\n\n      if (hasBoldFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n\n      if (hasLinethroughTextDecoration) {\n        lexicalNode.toggleFormat('strikethrough');\n      }\n\n      if (hasItalicFontStyle) {\n        lexicalNode.toggleFormat('italic');\n      }\n\n      if (hasUnderlineTextDecoration) {\n        lexicalNode.toggleFormat('underline');\n      }\n\n      if (verticalAlign === 'sub') {\n        lexicalNode.toggleFormat('subscript');\n      }\n\n      if (verticalAlign === 'super') {\n        lexicalNode.toggleFormat('superscript');\n      }\n\n      return lexicalNode;\n    },\n    node: null\n  };\n}\n\nfunction convertLineBreakToElement() {\n  return {\n    node: $createLineBreakNode()\n  };\n}\n\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode; // Google Docs wraps all copied HTML in a <b> with font-weight normal\n\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !hasNormalFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n\n      return lexicalNode;\n    },\n    node: null\n  };\n}\n\nfunction convertTextDOMNode(domNode, _parent, preformatted) {\n  let textContent = domNode.textContent || '';\n\n  if (!preformatted && /\\n/.test(textContent)) {\n    textContent = textContent.replace(/\\r?\\n/gm, ' ');\n\n    if (textContent.trim().length === 0) {\n      return {\n        node: null\n      };\n    }\n  }\n\n  return {\n    node: $createTextNode(textContent)\n  };\n}\n\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\n\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !lexicalNode.hasFormat(format)) {\n        lexicalNode.toggleFormat(format);\n      }\n\n      return lexicalNode;\n    },\n    node: null\n  };\n}\n\nfunction $createTextNode(text = '') {\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  static getType() {\n    return 'paragraph';\n  }\n\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  } // View\n\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n\n    return dom;\n  }\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n\n    if (element && this.isEmpty()) {\n      element.append(document.createElement('br'));\n    }\n\n    if (element) {\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n\n      if (direction) {\n        element.dir = direction;\n      }\n\n      const indent = this.getIndent();\n\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n\n    return {\n      element\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'paragraph',\n      version: 1\n    };\n  } // Mutation\n\n\n  insertNewAfter(_, restoreSelection) {\n    const newElement = $createParagraphNode();\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n\n  collapseAtStart() {\n    const children = this.getChildren(); // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n\n      const prevSibling = this.getPreviousSibling();\n\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nfunction convertParagraphElement() {\n  return {\n    node: $createParagraphNode()\n  };\n}\n\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n\n  editor._cloneNotNeeded.clear();\n\n  editor._dirtyLeaves = new Set();\n\n  editor._dirtyElements.clear();\n\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  } // Remove all the DOM nodes from the root element\n\n\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\n\nfunction initializeConversionCache(nodes) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM != null ? node.klass.importDOM.bind(node.klass) : null;\n\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n\n    handledConversions.add(importDOM);\n    const map = importDOM();\n\n    if (map !== null) {\n      Object.keys(map).forEach(key => {\n        let currentCache = conversionCache.get(key);\n\n        if (currentCache === undefined) {\n          currentCache = [];\n          conversionCache.set(key, currentCache);\n        }\n\n        currentCache.push(map[key]);\n      });\n    }\n  });\n  return conversionCache;\n}\n\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, ParagraphNode, ...(config.nodes || [])];\n  const onError = config.onError;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replacementClass = null;\n\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replacementClass = options.with;\n      } // Ensure custom nodes implement required methods.\n\n\n      {\n        const name = klass.name;\n\n        if (name !== 'RootNode') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n\n          if ( // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') && // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n\n          if ( // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n\n          if ( // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n\n      const type = klass.getType();\n      registeredNodes.set(type, {\n        klass,\n        replace: replacementClass,\n        transforms: new Set()\n      });\n    }\n  }\n\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes), isEditable);\n\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n\n  return editor;\n}\nclass LexicalEditor {\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor; // The root element associated with this editor\n\n    this._rootElement = null; // The current editor state\n\n    this._editorState = editorState; // Handling of drafts and updates\n\n    this._pendingEditorState = null; // Used to help co-ordinate selection and events\n\n    this._compositionKey = null;\n    this._deferred = []; // Used during reconciliation\n\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false; // Listeners\n\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    }; // Commands\n\n    this._commands = new Map(); // Editor configuration for theme/context.\n\n    this._config = config; // Mapping of types to their nodes\n\n    this._nodes = nodes; // React node decorators for portals\n\n    this._decorators = {};\n    this._pendingDecorators = null; // Used to optimize reconciliation\n\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set(); // Handling of DOM mutations\n\n    this._observer = null; // Used for identifying owning editors\n\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions; // We don't actually make use of the `editable` argument above.\n    // Doing so, causes e2e tests around the lock to fail.\n\n    this._editable = true;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n\n  isComposing() {\n    return this._compositionKey != null;\n  }\n\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n\n    const commandsMap = this._commands;\n\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n\n    const listenersInPriorityOrder = commandsMap.get(command);\n\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n\n  registerMutationListener(klass, listener) {\n    const registeredNode = this._nodes.get(klass.getType());\n\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klass);\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n\n  registerNodeTransform(klass, listener) {\n    const type = klass.getType();\n\n    const registeredNode = this._nodes.get(type);\n\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n\n    const transforms = registeredNode.transforms;\n    transforms.add(listener);\n    markAllNodesAsDirty(this, type);\n    return () => {\n      transforms.delete(listener);\n    };\n  }\n\n  hasNodes(nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      const klass = nodes[i];\n      const type = klass.getType();\n\n      if (!this._nodes.has(type)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n\n  getDecorators() {\n    return this._decorators;\n  }\n\n  getRootElement() {\n    return this._rootElement;\n  }\n\n  getKey() {\n    return this._key;\n  }\n\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n\n        this._updateTags.add('history-merge');\n\n        commitPendingUpdates(this); // TODO: remove this flag once we no longer use UEv2 internally\n\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        this._window = null;\n      }\n\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n\n  getEditorState() {\n    return this._editorState;\n  }\n\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n\n    flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n\n      commitPendingUpdates(this);\n    }\n\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n\n    this._dirtyElements.set('root', false);\n\n    this._compositionKey = null;\n\n    if (tag != null) {\n      tags.add(tag);\n    }\n\n    commitPendingUpdates(this);\n  }\n\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n\n  focus(callbackFn, options = {}) {\n    const rootElement = this._rootElement;\n\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n\n          if (callbackFn) {\n            callbackFn();\n          }\n        }\n      }); // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n\n  blur() {\n    const rootElement = this._rootElement;\n\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n\n    const domSelection = getDOMSelection(this._window);\n\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n\n  isEditable() {\n    return this._editable;\n  }\n\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass DEPRECATED_GridCellNode extends ElementNode {\n  /** @internal */\n  constructor(colSpan, key) {\n    super(key);\n    this.__colSpan = colSpan;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      colSpan: this.__colSpan\n    };\n  }\n\n}\nfunction DEPRECATED_$isGridCellNode(node) {\n  return node instanceof DEPRECATED_GridCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass DEPRECATED_GridNode extends ElementNode {}\nfunction DEPRECATED_$isGridNode(node) {\n  return node instanceof DEPRECATED_GridNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass DEPRECATED_GridRowNode extends ElementNode {}\nfunction DEPRECATED_$isGridRowNode(node) {\n  return node instanceof DEPRECATED_GridRowNode;\n}\n\nexports.$addUpdateTag = $addUpdateTag;\nexports.$applyNodeReplacement = $applyNodeReplacement;\nexports.$copyNode = $copyNode;\nexports.$createLineBreakNode = $createLineBreakNode;\nexports.$createNodeSelection = $createNodeSelection;\nexports.$createParagraphNode = $createParagraphNode;\nexports.$createRangeSelection = $createRangeSelection;\nexports.$createTextNode = $createTextNode;\nexports.$getAdjacentNode = $getAdjacentNode;\nexports.$getNearestNodeFromDOMNode = $getNearestNodeFromDOMNode;\nexports.$getNearestRootOrShadowRoot = $getNearestRootOrShadowRoot;\nexports.$getNodeByKey = $getNodeByKey;\nexports.$getPreviousSelection = $getPreviousSelection;\nexports.$getRoot = $getRoot;\nexports.$getSelection = $getSelection;\nexports.$getTextContent = $getTextContent;\nexports.$hasAncestor = $hasAncestor;\nexports.$insertNodes = $insertNodes;\nexports.$isDecoratorNode = $isDecoratorNode;\nexports.$isElementNode = $isElementNode;\nexports.$isInlineElementOrDecoratorNode = $isInlineElementOrDecoratorNode;\nexports.$isLeafNode = $isLeafNode;\nexports.$isLineBreakNode = $isLineBreakNode;\nexports.$isNodeSelection = $isNodeSelection;\nexports.$isParagraphNode = $isParagraphNode;\nexports.$isRangeSelection = $isRangeSelection;\nexports.$isRootNode = $isRootNode;\nexports.$isRootOrShadowRoot = $isRootOrShadowRoot;\nexports.$isTextNode = $isTextNode;\nexports.$nodesOfType = $nodesOfType;\nexports.$normalizeSelection__EXPERIMENTAL = $normalizeSelection;\nexports.$parseSerializedNode = $parseSerializedNode;\nexports.$setCompositionKey = $setCompositionKey;\nexports.$setSelection = $setSelection;\nexports.BLUR_COMMAND = BLUR_COMMAND;\nexports.CAN_REDO_COMMAND = CAN_REDO_COMMAND;\nexports.CAN_UNDO_COMMAND = CAN_UNDO_COMMAND;\nexports.CLEAR_EDITOR_COMMAND = CLEAR_EDITOR_COMMAND;\nexports.CLEAR_HISTORY_COMMAND = CLEAR_HISTORY_COMMAND;\nexports.CLICK_COMMAND = CLICK_COMMAND;\nexports.COMMAND_PRIORITY_CRITICAL = COMMAND_PRIORITY_CRITICAL;\nexports.COMMAND_PRIORITY_EDITOR = COMMAND_PRIORITY_EDITOR;\nexports.COMMAND_PRIORITY_HIGH = COMMAND_PRIORITY_HIGH;\nexports.COMMAND_PRIORITY_LOW = COMMAND_PRIORITY_LOW;\nexports.COMMAND_PRIORITY_NORMAL = COMMAND_PRIORITY_NORMAL;\nexports.CONTROLLED_TEXT_INSERTION_COMMAND = CONTROLLED_TEXT_INSERTION_COMMAND;\nexports.COPY_COMMAND = COPY_COMMAND;\nexports.CUT_COMMAND = CUT_COMMAND;\nexports.DELETE_CHARACTER_COMMAND = DELETE_CHARACTER_COMMAND;\nexports.DELETE_LINE_COMMAND = DELETE_LINE_COMMAND;\nexports.DELETE_WORD_COMMAND = DELETE_WORD_COMMAND;\nexports.DEPRECATED_$createGridSelection = DEPRECATED_$createGridSelection;\nexports.DEPRECATED_$isGridCellNode = DEPRECATED_$isGridCellNode;\nexports.DEPRECATED_$isGridNode = DEPRECATED_$isGridNode;\nexports.DEPRECATED_$isGridRowNode = DEPRECATED_$isGridRowNode;\nexports.DEPRECATED_$isGridSelection = DEPRECATED_$isGridSelection;\nexports.DEPRECATED_GridCellNode = DEPRECATED_GridCellNode;\nexports.DEPRECATED_GridNode = DEPRECATED_GridNode;\nexports.DEPRECATED_GridRowNode = DEPRECATED_GridRowNode;\nexports.DRAGEND_COMMAND = DRAGEND_COMMAND;\nexports.DRAGOVER_COMMAND = DRAGOVER_COMMAND;\nexports.DRAGSTART_COMMAND = DRAGSTART_COMMAND;\nexports.DROP_COMMAND = DROP_COMMAND;\nexports.DecoratorNode = DecoratorNode;\nexports.ElementNode = ElementNode;\nexports.FOCUS_COMMAND = FOCUS_COMMAND;\nexports.FORMAT_ELEMENT_COMMAND = FORMAT_ELEMENT_COMMAND;\nexports.FORMAT_TEXT_COMMAND = FORMAT_TEXT_COMMAND;\nexports.INDENT_CONTENT_COMMAND = INDENT_CONTENT_COMMAND;\nexports.INSERT_LINE_BREAK_COMMAND = INSERT_LINE_BREAK_COMMAND;\nexports.INSERT_PARAGRAPH_COMMAND = INSERT_PARAGRAPH_COMMAND;\nexports.KEY_ARROW_DOWN_COMMAND = KEY_ARROW_DOWN_COMMAND;\nexports.KEY_ARROW_LEFT_COMMAND = KEY_ARROW_LEFT_COMMAND;\nexports.KEY_ARROW_RIGHT_COMMAND = KEY_ARROW_RIGHT_COMMAND;\nexports.KEY_ARROW_UP_COMMAND = KEY_ARROW_UP_COMMAND;\nexports.KEY_BACKSPACE_COMMAND = KEY_BACKSPACE_COMMAND;\nexports.KEY_DELETE_COMMAND = KEY_DELETE_COMMAND;\nexports.KEY_ENTER_COMMAND = KEY_ENTER_COMMAND;\nexports.KEY_ESCAPE_COMMAND = KEY_ESCAPE_COMMAND;\nexports.KEY_MODIFIER_COMMAND = KEY_MODIFIER_COMMAND;\nexports.KEY_SPACE_COMMAND = KEY_SPACE_COMMAND;\nexports.KEY_TAB_COMMAND = KEY_TAB_COMMAND;\nexports.LineBreakNode = LineBreakNode;\nexports.MOVE_TO_END = MOVE_TO_END;\nexports.MOVE_TO_START = MOVE_TO_START;\nexports.OUTDENT_CONTENT_COMMAND = OUTDENT_CONTENT_COMMAND;\nexports.PASTE_COMMAND = PASTE_COMMAND;\nexports.ParagraphNode = ParagraphNode;\nexports.REDO_COMMAND = REDO_COMMAND;\nexports.REMOVE_TEXT_COMMAND = REMOVE_TEXT_COMMAND;\nexports.RootNode = RootNode;\nexports.SELECTION_CHANGE_COMMAND = SELECTION_CHANGE_COMMAND;\nexports.TextNode = TextNode;\nexports.UNDO_COMMAND = UNDO_COMMAND;\nexports.createCommand = createCommand;\nexports.createEditor = createEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}